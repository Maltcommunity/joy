/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AvatarColors, AvatarSizes, BackDropOrigin, ButtonSizes, ButtonVariants, DialogSizes, Direction, HighlightLevels, HyperLinksTargets, IconButtonColors, IconColors, IconsSizes, IndicatorsVariants, InputSizes, LabelSizes, LinksColors, Positions, RatingStarsSizes, SeparatorSizes, SnackbarLevels, Tab, TagSizes, TagVariants, TooltipVariants } from "./types";
import { FormPickerTypes, LabelSizes as LabelSizes1 } from "@/types";
export namespace Components {
    interface JoyAvailability {
        /**
          * isPartial dot, define fill or stroke dot display
         */
        "isPartial": boolean;
        /**
          * Text Availability content, if null, only dot will be display
         */
        "label": string | null;
        /**
          * Status Availability, define color
         */
        "status": 'AVAILABLE' | 'AVAILABLE_AND_VERIFIED' | 'NOT_AVAILABLE_WITH_DATE' | 'AVAILABLE_SOON' | 'NOT_AVAILABLE' | '';
    }
    interface JoyAvatar {
        /**
          * Specify a background color. Handy for avatars list. The value is the index of css custom property array made from CSS Custom Properties value (see next table)
         */
        "color"?: AvatarColors['freelancer'];
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "compress": boolean;
        /**
          * Freelancer full name. Will be used to display its initials if no photoUrl is given.
         */
        "fullName"?: string;
        /**
          * Url you need to link your avatar to
         */
        "href"?: string;
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "isFirstFromList": boolean;
        /**
          * Specify a photo url to display.
         */
        "photoUrl"?: string;
        /**
          * Avatar size, 3 possible values (can't be overridden)
         */
        "size"?: AvatarSizes;
        /**
          * Target attribute if href is used
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | 'framename';
        /**
          * Specify the total amount of persons remaining from a list.
         */
        "totalNumber"?: number;
        /**
          * Specify the link to redirect to the full list
         */
        "totalNumberLink"?: string;
    }
    interface JoyAvatarsList {
        /**
          * How avatars are spread. With a gap, or overlaped
         */
        "compress": boolean;
    }
    interface JoyBackdrop {
        /**
          * The backdrop can be created from many components *
         */
        "origin": BackDropOrigin;
    }
    interface JoyBadgeLevel {
        /**
          * SuperMalter level from 1 to 3
         */
        "superMalterLevel": number;
        /**
          * Badge type: highpotential, high-potential-auto, maltlinker, new, supermalter or verified or program: program_highpotential
         */
        "type": JoyBadgeLevelEnum | JoyBadgeProgramEnum;
        /**
          * Display text label
         */
        "visibleText": boolean;
    }
    interface JoyBottomSheet {
        /**
          * Call this method to close the bottom sheet. Example: el.close()
         */
        "close": () => Promise<void>;
        /**
          * close-label used for close button. Default: 'Close'
         */
        "closeLabel": string;
        /**
          * close-variant used for close button. Default: 'primary' See: joy-button documentation
         */
        "closeVariant": ButtonVariants;
        /**
          * Call this method to open the bottom sheet. Example: el.open()
         */
        "open": () => Promise<void>;
    }
    interface JoyButton {
        /**
          * Allows to display the spinner while asynchronous tasks are pending
          * @param loading - loading status
          * @param timeout - if you want to display the loader during a specific timeout
         */
        "buttonLoading": (loading: boolean, timeout?: number) => Promise<void>;
        /**
          * Disabled attribute for buttons
         */
        "disabled": boolean;
        /**
          * If the link as a downloadable content
         */
        "download": string | undefined;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Set the icon name if you need one
         */
        "icon"?: string;
        /**
          * Set the button in loading state
         */
        "loading": boolean;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Button or Link size
         */
        "size": ButtonSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Type attribute for buttons
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * Button or Link color theme
         */
        "variant": ButtonVariants;
    }
    interface JoyCheckbox {
        /**
          * Checkbox activated or not
         */
        "checked": boolean;
        /**
          * Disabled state
         */
        "disabled": boolean;
        /**
          * It will be applied as the hidden input name attribute (for the actual form)
         */
        "name": string;
        /**
          * Checkbox is required
         */
        "required": boolean;
        /**
          * Update checkbox state from outside the component
          * @param newValue
         */
        "updateValue": (newValue: boolean) => Promise<void>;
        /**
          * Input value. Input value != checked state ! If you need to get the state checked/not checked, simply use checked prop
         */
        "value": string;
    }
    interface JoyCompanyAvatar {
        /**
          * @deprecated Company avatar color
         */
        "color": AvatarColors['company'];
        /**
          * Company name. Required to give image alt text.
         */
        "companyName": string;
        /**
          * URL source for img. Optional.
         */
        "imgSrc"?: string;
        /**
          * Size of the image. Optionnal.
         */
        "size"?: AvatarSizes;
    }
    interface JoyCounter {
        /**
          * aria-label used for input accessibility. Use string only, no HTML. More than welcome !
         */
        "ariaLabel": string;
        /**
          * Allows to manually decrement counter value from outside.
         */
        "decrement": () => Promise<void>;
        /**
          * Allows to manually increment counter value from outside.
         */
        "increment": () => Promise<void>;
        /**
          * Invalid state of the component
         */
        "invalid": boolean;
        /**
          * Message when the component is invalid. Warning : by default, it will pick HTML5 validation message (the language is defined by your OS)
         */
        "invalidMessage": string;
        /**
          * Used for accessibility aria-label attribute. More than welcome !
         */
        "labelDecrement": string;
        /**
          * Used for accessibility aria-label attribute. More than welcome !
         */
        "labelIncrement": string;
        /**
          * The label input's size.
         */
        "labelSize": LabelSizes;
        /**
          * Maximum possible value. No default
         */
        "max"?: number;
        /**
          * Minimum possible value. Default to 0
         */
        "min": number;
        /**
          * Name for the input
         */
        "name": string;
        /**
          * Inject the right wording if your field is not required. the "-" separator is already handled internally. *
         */
        "optionalLabel"?: string;
        /**
          * Counter requirement
         */
        "required": boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark": boolean;
        /**
          * Granularity of the input. We use the same name than native step attribute. We don't bind this prop to actual input step attribute, because we don't want checkValidity API to return invalid if the actual value is not a multiple of step prop !
         */
        "step": number;
        /**
          * Counter value *
         */
        "value": number;
    }
    interface JoyDialog {
        /**
          * Choose whether backdrop is injected at the root of the body or next to the dialog itself. If a parent element has some media queries rules and is getting hidden at some point, injecting the backdrop next to the dialog is a good way to prevent issues. Default to body.
         */
        "appendBackdrop": 'body' | 'sibling';
        /**
          * Set the height of the banner. Default to 250
         */
        "bannerHeight"?: number | undefined;
        /**
          * Set the position of the banner image. Work exactly like css background-position property
         */
        "bannerPosition": string;
        /**
          * Set the URL of the image you can inject as pre-header banner
         */
        "bannerSrc"?: string;
        /**
          * Set the alt text of the banner
         */
        "bannerSrcAlt"?: string;
        /**
          * If you want to change the CTA sizes, please choose between small, medium, large
         */
        "buttonSize": ButtonSizes;
        /**
          * Secondary CTA text. If none given, it won't show the CTA
         */
        "cancelText"?: string;
        /**
          * Hide the dialog from outside
          * @return
         */
        "closeDialog": () => Promise<void>;
        /**
          * Main CTA text. If none given, it won't show the CTA
         */
        "confirmText"?: string;
        "demo": boolean;
        /**
          * Dialog open state
         */
        "open": boolean;
        /**
          * If you want to trigger specific action after the dialog opening.
          * @param callback
         */
        "openDialog": (callback?: (() => any) | undefined) => Promise<void>;
        /**
          * Dialog sizes
         */
        "size": DialogSizes;
    }
    interface JoyDialogTrigger {
        /**
          * The ID of the dialog you want to show. Required *
         */
        "dialog": string;
        /**
          * For dialogs containing joy-indicators with multiple steps, you can specify a step number *
         */
        "step"?: number;
    }
    interface JoyDividerCta {
        /**
          * Disabled or not
         */
        "disabled": boolean;
    }
    interface JoyDropdown {
        /**
          * By default, the dropdown is closed if you focusout the dropdown. For debugging purpose or specific behavior, you can toggle off this option. *
         */
        "closeOnBlur": boolean;
        /**
          * Disabled state. *
         */
        "disabled": boolean;
        /**
          * Pick an icon displayed before the label. *
         */
        "icon"?: string;
        /**
          * Invalid state. *
         */
        "invalid": boolean;
        /**
          * Invalid state message. *
         */
        "invalidMessage": string;
        /**
          * Select name attribute to be found by parent form. *
         */
        "name": string;
        /**
          * Mandatory or not. *
         */
        "required": boolean;
        /**
          * Select actual value. *
         */
        "value": string;
    }
    interface JoyDropzone {
        /**
          * Add accepted file formats
         */
        "accept": string;
        /**
          * Add CTA Cancellation Text
         */
        "buttonCancelText": string;
        /**
          * Add CTA Upload Text
         */
        "buttonText": string;
        /**
          * Add description Text
         */
        "descriptionStrongText": string;
        /**
          * Add description Text
         */
        "descriptionText": string;
        /**
          * Makes the dropzone disabled or not
         */
        "disabled": boolean;
        /**
          * Add custom error message when uploaded file format is not accepted
         */
        "errorTextFormat": string;
        /**
          * Add custom error message when uploaded file size is bigger than maxSize
         */
        "errorTextMaxSize": string;
        /**
          * set a unique id for the input file
         */
        "idDropzone"?: string;
        /**
          * Makes the dropzone invalid or not
         */
        "invalid": boolean;
        /**
          * set In progress state
          * @param loading
          * @return
         */
        "isLoading": (loading: boolean) => Promise<void>;
        /**
          * Add legend/specification text
         */
        "legend"?: string | null;
        /**
          * Make the dropzone in progress state or not
         */
        "loading": boolean;
        /**
          * set MaxSize (Megabytes), default to 32 MB
         */
        "maxSize": number;
        /**
          * Enable multiple files upload
         */
        "multiple": boolean;
        /**
          * Add Uploading Text
         */
        "uploadingText": string;
    }
    interface JoyFormError {
        /**
          * The error text. Plain string required as any HTML injected will be escaped
         */
        "noHtmlErrorText"?: string;
        /**
          * Depending on contexts : maybe you'll need to insert it in the DOM but hide it, or injecting it into the DOM on the fly (like Vue v-if cases)
         */
        "visible": boolean;
    }
    interface JoyHighlight {
        /**
          * Add the left border accent on the highlight.
         */
        "accent": boolean;
        /**
          * Allows to display the level status icon
         */
        "displayIcon": boolean;
        /**
          * Override the icon type used for level. Size can't be overridden. Won't show if displayIcon prop isn't set to true
         */
        "icon"?: string;
        /**
          * Defines the criticalness of the highlight
         */
        "level": HighlightLevels;
    }
    interface JoyIcon {
        /**
          * Defines a non-visible legend
         */
        "ariaLabel"?: string;
        /**
          * Two-tone icon when set to true
         */
        "bicolor": boolean;
        /**
          * Color change on hover
         */
        "clickable": boolean;
        /**
          * The icon color
         */
        "color"?: IconColors;
        /**
          * The icon custom class(es), if needed
         */
        "customClass"?: string;
        /**
          * Full colored icon when set to true
         */
        "full": boolean;
        /**
          * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
         */
        "lazy": boolean;
        /**
          * The icon svg filename
         */
        "name": string;
        /**
          * The icon size
         */
        "size"?: IconsSizes;
    }
    interface JoyIconButton {
        /**
          * The icon color. Default is the blue version. You can only override it with the white version.
         */
        "color"?: IconButtonColors;
        /**
          * The icon name
         */
        "icon"?: string;
        /**
          * The button type. As the component wraps an actual HTML button element, it will be applied to it.
         */
        "type"?: 'button';
    }
    interface JoyIndicator {
        /**
          * @param select - Select or not, the indicator.
          * @return
         */
        "selectIndicator": (select?: boolean) => Promise<void>;
        "selected": boolean;
        /**
          * @return - Force focus from outside
         */
        "setFocus": () => Promise<void>;
        "variant": IndicatorsVariants;
    }
    interface JoyIndicators {
        /**
          * Selected state *
         */
        "selected": number;
        /**
          * Variant colors. 2 possibles values *
         */
        "variant": IndicatorsVariants;
    }
    interface JoyInput {
        /**
          * The input's autocomplete policy.
         */
        "autocomplete": string;
        /**
          * Makes the field disabled or not
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Add an icon on the left side before the value
         */
        "icon"?: string;
        /**
          * A hint to the browser for which keyboard to display.
         */
        "inputmode"?: 'none' | 'decimal' | 'text' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * Makes the field readonly or not
         */
        "invalid": boolean;
        /**
          * The label input's size.
         */
        "labelSize": LabelSizes;
        /**
          * If the type is "number" then you can use max property.
         */
        "max"?: number;
        /**
          * Max character number. https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/maxlength
         */
        "maxlength"?: number;
        /**
          * If the type is "number" then you can use min property.
         */
        "min"?: number;
        /**
          * Max character number. https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/minlength
         */
        "minlength"?: number;
        /**
          * Input types. List is not exhaustive, this component does not deal with checkboxes, radios, files, dates.
         */
        "name": string;
        /**
          * Inject the right wording if your field is not required. the "-" separator is already handled internally. *
         */
        "optionalLabel"?: string;
        /**
          * A regular expression that the value is checked against. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * The input's placeholder text.
         */
        "placeholder": string;
        /**
          * Makes the field readonly or not
         */
        "readonly": boolean;
        /**
          * Makes the field required
         */
        "required": boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark": boolean;
        /**
          * At the moment, for E2E purpose
         */
        "setFocus": () => Promise<void>;
        /**
          * The input's size.
         */
        "size": InputSizes;
        /**
          * If the type is "number" then you can use step property.
         */
        "step": number | 'any';
        /**
          * Input types. List is not exhaustive, this component does not deal with checkboxes, radios, files, dates. The type=number state is not appropriate for input that happens to only consist of numbers but isn’t strictly speaking a number (credit card number for example)
         */
        "type": 'hidden' | 'text' | 'number' | 'search' | 'email' | 'password' | 'tel';
        /**
          * If the field is of type number, you can specify a unit like %, days, hours, whatever you want
         */
        "unit"?: string;
        /**
          * Field value
         */
        "value": string;
    }
    interface JoyLabel {
        /**
          * for attribute to associate label to an input *
         */
        "htmlFor"?: string;
        /**
          * Inject the right wording if your field is not required. the "-" separator is already handled internally. *
         */
        "optionalLabel"?: string;
        /**
          * Required status of parent form field *
         */
        "required": boolean;
        /**
          * Label size *
         */
        "size": LabelSizes;
    }
    interface JoyLink {
        /**
          * Filename of the downloadable content
         */
        "download"?: string;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Icon name if you want to display one, before the text
         */
        "icon"?: string;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Color theme. Default is teal, you can set white theme for darker backgrounds.
         */
        "theme": LinksColors;
    }
    interface JoyOption {
        /**
          * Disabled state. *
         */
        "disabled": boolean;
        /**
          * For dropdown use, you can transform your option in link *
         */
        "href"?: string;
        /**
          * If the option is selected or not *
         */
        "selected": boolean;
        /**
          * Value bubbled up to the select component *
         */
        "value": string;
    }
    interface JoyPagination {
        /**
          * Current page number
         */
        "currentPage": number;
        /**
          * data-heap attribute for next CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapNext"?: string;
        /**
          * data-heap attribute for previous CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapPrev"?: string;
        /**
          * Can be used as title and aria-label attributes for the next CTA
         */
        "labelNext"?: string | undefined;
        /**
          * Can be used as aria-label attribute for the full component
         */
        "labelPagination"?: string;
        /**
          * Can be used as title and aria-label attributes for the previous CTA
         */
        "labelPrev"?: string | undefined;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for next CTA
         */
        "linkNext"?: string;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for previous CTA
         */
        "linkPrev"?: string;
        /**
          * Total number of pages in order to construct the pagination
         */
        "totalPages": number;
    }
    interface JoyPlaceholderButton {
        /**
          * Placeholder button sizes.
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface JoyProductTour {
        "closeProductTour": () => Promise<void>;
        /**
          * Overlay is useful to prevent user interactions with elements that are below when the product tour is open. It can be disabled if the highlighted target element needs to be interactive but one of its parent node has its own stacking context (e.g. a parent with a lower z-index). Then the whole page will be interactive.
         */
        "disableOverlay": boolean;
        /**
          * Product-tour can be hidden by 3 elements by default, dismiss bottom CTA, top-right corner icon, and backdrop. If you don't want the backdrop click to close the product-tour, use "not-backdrop" value.
         */
        "dismissedBy": 'all' | 'not-backdrop';
        /**
          * Icon name, placed left to the title
         */
        "icon"?: string;
        /**
          * Set a max width for your container
         */
        "maxWidth"?: number | undefined;
        /**
          * Product tour open state
         */
        "open": boolean;
        /**
          * Product tour position according to highlighted content
         */
        "position": Positions;
        /**
          * @param fromElement - Specify which DOM element you want to highlight with your product tour
          * @param chainingProductTour - Specify if we want to show the product tour after another to prevent backdrop animation
          * @param callback - Function triggered after product-tour display
         */
        "showProductTour": <T>(fromElement: HTMLElement, chainingProductTour?: boolean, callback?: (() => T) | undefined) => Promise<void>;
        /**
          * Padding around the spotlight area. Value in pixel
         */
        "spotlightPadding": number;
        /**
          * If multiple product tour are need, specify the current step number
         */
        "step"?: number | undefined;
        /**
          * If multiple product tour are need, specify the amount
         */
        "steps"?: number;
    }
    interface JoyProductTourSpotlight {
    }
    interface JoyProductTourTrigger {
        /**
          * The ID of the product tour you want to show. Required *
         */
        "productTour": string;
        /**
          * If `true` the product tour will be displayed immediately *
         */
        "showOnLoad": boolean;
        /**
          * For dialogs containing joy-indicators with multiple steps, you can specify a step number *
         */
        "step"?: number;
        /**
          * Target of the trigger. If none given, it will be this component. *
         */
        "target"?: string;
    }
    interface JoyProgressBar {
        /**
          * Current step number.
         */
        "currentStep": number | undefined;
        /**
          * Activate specific color mode. Documentation purpose.
         */
        "mode": 'desktop' | 'mobile';
        /**
          * Progress bar percentage, percentage usage will override steps & currentStep definition.
         */
        "percentage": number | undefined;
        /**
          * Total number of steps.
         */
        "steps": number | undefined;
    }
    interface JoyRadio {
        /**
          * If `true`, the radio is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled": boolean;
        /**
          * Field name. Given by parent component
         */
        "name": string;
        /**
          * Field is required
         */
        "required": boolean;
        /**
          * @param value
         */
        "setButtonTabindex": (value: number) => Promise<void>;
        /**
          * @param ev
         */
        "setFocus": (ev: any) => Promise<void>;
        /**
          * Defines the type of the radio 'default' or 'outline'
         */
        "type": FormPickerTypes;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface JoyRadioGroup {
        /**
          * Label displayed for the whoe radio group.
         */
        "direction": 'vertical' | 'horizontal';
        /**
          * Invalid state of the radio group
         */
        "invalid": boolean;
        /**
          * Invalid message
         */
        "invalidText"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface JoyRatingStars {
        /**
          * The actual rating, between 0 and 5.
         */
        "ratingValue": number;
        /**
          * Review count. it will be displayed with parenthesis : (5)
         */
        "reviewCount": number;
        /**
          * Star size. 3 possible values but you can't give a number as value
         */
        "size": RatingStarsSizes;
    }
    interface JoySelect {
        /**
          * Disabled state. *
         */
        "disabled": boolean;
        /**
          * Invalid state. *
         */
        "invalid": boolean;
        /**
          * Invalid state message. *
         */
        "invalidMessage": string;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The label input's size.
         */
        "labelSize": LabelSizes;
        /**
          * Select name attribute to be found by parent form. *
         */
        "name": string;
        /**
          * Mandatory or not. *
         */
        "required": boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark": boolean;
        /**
          * Mandatory or not. *
         */
        "value"?: string;
    }
    interface JoySelectOption {
        /**
          * Disabled state. *
         */
        "disabled": boolean;
        /**
          * If the option is selected or not *
         */
        "selected": boolean;
        /**
          * Value bubbled up to the select component *
         */
        "value": string;
    }
    interface JoySelectableItem {
        /**
          * Checked state *
         */
        "checked": boolean;
        /**
          * Disabled state *
         */
        "disabled": boolean;
        /**
          * Name property for form participation *
         */
        "name"?: string;
        /**
          * If you use this component with a joy-checkbox as slot: set the value only on the joy-checkbox, it will be automatically applied to it's parent *
         */
        "value"?: string;
    }
    interface JoySelectableItemGroup {
        /**
          * If set to true, css flex rule will by applied in order to take all horizontal space available *
         */
        "fullWidth": boolean;
        /**
          * @return
         */
        "getSelectedItemsValue": () => Promise<string | (string | undefined)[] | undefined>;
        /**
          * If multiple is set to true, it means you'll have to add joy-checkbox items. If not, a hidden radio box is included *
         */
        "multiple": boolean;
        /**
          * Selected item *
         */
        "value"?: string;
    }
    interface JoySeparator {
        /**
          * Separator size. 2 possible values : 100% width or adjusted size according to text
         */
        "size": SeparatorSizes;
        /**
          * The separator text
         */
        "text": string;
    }
    interface JoySnackbar {
        /**
          * Display an icon to close the notification manually
         */
        "closable"?: boolean;
        /**
          * HTML with your custom message injected in the component. It won't be escaped so please be careful with XSS !
         */
        "dangerousHtmlMessage": string;
        /**
          * Time in ms the snackbar is displayed. Give 'forever' to be able to display the snackbar without timeout
         */
        "duration"?: number | 'forever';
        /**
          * The criticality level of your notification. Range from simple info to error.
         */
        "level": SnackbarLevels;
        /**
          * By default, the snackbar will be displayed in a fixed position at the bottom of the page. You can override this behavior by setting position="relative"
         */
        "position"?: 'fixed' | 'relative';
        /**
          * If you need to create an action link (like cancel an action from snackbar) simply pas its text. Clicking on it will trigger a custom event
         */
        "triggerActionText"?: string;
    }
    interface JoySpinner {
        /**
          * Spinner colors, 2 possible values
         */
        "color"?: string;
    }
    interface JoyStep {
        /**
          * If the step is completed. *
         */
        "completed": boolean;
        /**
          * Used to change style for mobile. *
         */
        "direction": Direction;
        /**
          * If the step is ongoing. *
         */
        "ongoing": boolean;
        "setAsLast": () => Promise<void>;
        /**
          * Marks the step as completed
         */
        "setCompleted": () => Promise<void>;
        /**
          * Marks the direction as vertical or horizontal
          * @param direction - horizontal or vertical
         */
        "setDirection": (direction: Direction) => Promise<void>;
        /**
          * Marks the step as ongoing
         */
        "setOnGoing": () => Promise<void>;
        /**
          * Default or small. *
         */
        "size": 'small' | 'default';
    }
    interface JoyStepper {
        /**
          * Used to change style for mobile. *
         */
        "direction": Direction;
        /**
          * Defines the CSS flex horizontal justify distribution *
         */
        "justify": boolean;
        /**
          * Set the step number of the stepper. Will auto-complete each step that is < step. Starts from 0. *
         */
        "step": number;
    }
    interface JoyTab {
        /**
          * Selected status of the current tab
         */
        "selected": boolean;
        /**
          * Set the active component for the tab
         */
        "setActive": () => Promise<void>;
        /**
          * A tab id or name must be provided for each `joy-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabButton {
        /**
          * "data-heap" attribute to set on the link if an {@link href} prop is passed or on the host otherwise..
         */
        "heapId"?: string;
        /**
          * If your tab is a link, give the URL
         */
        "href"?: string;
        /**
          * Set the tabulation selected or not
          * @param status
         */
        "selectTabButton": (status: boolean) => Promise<void>;
        /**
          * Tab selection state
         */
        "selected": boolean;
        /**
          * A tab id or name must be provided for each `joy-button-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabs {
        /**
          * Use this prop to activate a specific tab by default by giving its name
         */
        "selectedTab": string;
        /**
          * Use this prop to specify that your joy-tabs is made of links, and tabs are not updated on the fly
         */
        "sync": boolean;
    }
    interface JoyTag {
        /**
          * If the tag is a link, give it an href
         */
        "href"?: string;
        /**
          * Display an icon CTA on the right, to remove the tag from a list. Only for primary/secondary
         */
        "removable": boolean;
        /**
          * Select the tag from outside
          * @param select - selected or not
         */
        "selectTag": (select?: boolean) => Promise<void>;
        /**
          * Mock a radio like style. Nothing more. Only for primary/secondary
         */
        "selectable": boolean;
        /**
          * Tag size. Default is medium
         */
        "size": TagSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Tag color theme
         */
        "variant": TagVariants;
    }
    interface JoyTagsInput {
        /**
          * Get the array of values contained in the tag input
         */
        "getValues": () => Promise<string[]>;
        /**
          * Invalid state
         */
        "invalid": boolean;
        /**
          * form name for our tags input
         */
        "name"?: string;
        /**
          * Placeholder used for the input
         */
        "placeholder": string;
        /**
          * Size for your tags. Check Tag documentation for available values
         */
        "size": TagSizes;
        /**
          * Allows to resort tag list with drag&drop
         */
        "sortableTags": boolean;
        /**
          * Suggestion of values. Allows to directly pick them instead of typing.
         */
        "suggestions"?: string;
        /**
          * Suggestion label. Not mandatory.
         */
        "suggestionsLabel"?: string;
        /**
          * Validation type : if 'email' is given, it will create a specific check before actually adding the tag. Default to none.
         */
        "validation": 'email' | 'none';
        /**
          * Saved values for the tags list. Must be an array like string eg. ['first', 'second'].
         */
        "values"?: string;
        /**
          * Variant/color type for your tags. Check Tag documentation for available values
         */
        "variant": TagVariants;
    }
    interface JoyTagsList {
        /**
          * Tags justify-content strategy. *
         */
        "align": 'center' | 'left' | 'right';
    }
    interface JoyText {
    }
    interface JoyTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow": boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit": boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
         */
        "fireFocusEvents": boolean;
        /**
          * Force run auto grow
         */
        "forceRunAutoGrow": () => Promise<void>;
        /**
          * Returns the textarea nested in the component shadowDOM
          * @return - Returns the native `<textarea>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true`, the textarea will be considered as invalid.
         */
        "invalid": boolean;
        /**
          * The label input's size.
         */
        "labelSize": LabelSizes;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Use this prop to give component the translation used to display minimum chars count.
         */
        "minlengthLabel"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number | undefined;
        /**
          * Sets blur on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * The value of the textarea.
         */
        "value": string;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface JoyToggle {
        /**
          * Toggle activated or not
         */
        "checked": boolean;
        /**
          * Disabled state
         */
        "disabled": boolean;
        /**
          * It will be applied as the hidden input name attribute (for the actual form)
         */
        "name": string;
        /**
          * Update toggle value from outside the component
          * @param newValue true or false...
         */
        "updateValue": (newValue: boolean) => Promise<void>;
        /**
          * Input value. TODO : check if we really need it as we use a checkbox system
         */
        "value"?: string;
    }
    interface JoyTooltip {
        /**
          * Tooltip position. 2 possible values
         */
        "position": Positions;
        /**
          * Color theme. 2 possible values
         */
        "variant": TooltipVariants;
    }
    interface JoyTooltipTrigger {
        /**
          * Use basic selector to inject the tooltip in a specific DOM location. Default is body
         */
        "appendTo": 'body' | 'host';
        /**
          * Define the event needed to display the tooltip
         */
        "event": 'mouseenter' | 'click';
        /**
          * Tooltip position. 2 possible values
         */
        "position": 'left' | 'right';
        /**
          * Allows to override tooltip size. Allows to more easily calculate its position
         */
        "tooltipWidth": number;
        /**
          * Color theme. 2 possible values
         */
        "variant": TooltipVariants;
    }
    interface JoyUserCard {
        /**
          * Can be the freelancer's full name, or whatever you want. It will be placed at the top right part.
         */
        "fullName"?: string;
        /**
          * Giving a link will make the whole component wrapped by an hyperlink
         */
        "link"?: string;
        /**
          * Given the link, it will open the link in a new tab
         */
        "newTab"?: boolean;
        /**
          * Use this prop if you don't want to use the user-card-avatar slot.
         */
        "photoUrl"?: string;
        /**
          * Freelancer's public rating.
         */
        "ratingValue"?: string;
        /**
          * Can be the freelancer's job, a company name or whatever you want. It will be placed at the top right part, below title
         */
        "subTitle"?: string;
    }
}
declare global {
    interface HTMLJoyAvailabilityElement extends Components.JoyAvailability, HTMLStencilElement {
    }
    var HTMLJoyAvailabilityElement: {
        prototype: HTMLJoyAvailabilityElement;
        new (): HTMLJoyAvailabilityElement;
    };
    interface HTMLJoyAvatarElement extends Components.JoyAvatar, HTMLStencilElement {
    }
    var HTMLJoyAvatarElement: {
        prototype: HTMLJoyAvatarElement;
        new (): HTMLJoyAvatarElement;
    };
    interface HTMLJoyAvatarsListElement extends Components.JoyAvatarsList, HTMLStencilElement {
    }
    var HTMLJoyAvatarsListElement: {
        prototype: HTMLJoyAvatarsListElement;
        new (): HTMLJoyAvatarsListElement;
    };
    interface HTMLJoyBackdropElement extends Components.JoyBackdrop, HTMLStencilElement {
    }
    var HTMLJoyBackdropElement: {
        prototype: HTMLJoyBackdropElement;
        new (): HTMLJoyBackdropElement;
    };
    interface HTMLJoyBadgeLevelElement extends Components.JoyBadgeLevel, HTMLStencilElement {
    }
    var HTMLJoyBadgeLevelElement: {
        prototype: HTMLJoyBadgeLevelElement;
        new (): HTMLJoyBadgeLevelElement;
    };
    interface HTMLJoyBottomSheetElement extends Components.JoyBottomSheet, HTMLStencilElement {
    }
    var HTMLJoyBottomSheetElement: {
        prototype: HTMLJoyBottomSheetElement;
        new (): HTMLJoyBottomSheetElement;
    };
    interface HTMLJoyButtonElement extends Components.JoyButton, HTMLStencilElement {
    }
    var HTMLJoyButtonElement: {
        prototype: HTMLJoyButtonElement;
        new (): HTMLJoyButtonElement;
    };
    interface HTMLJoyCheckboxElement extends Components.JoyCheckbox, HTMLStencilElement {
    }
    var HTMLJoyCheckboxElement: {
        prototype: HTMLJoyCheckboxElement;
        new (): HTMLJoyCheckboxElement;
    };
    interface HTMLJoyCompanyAvatarElement extends Components.JoyCompanyAvatar, HTMLStencilElement {
    }
    var HTMLJoyCompanyAvatarElement: {
        prototype: HTMLJoyCompanyAvatarElement;
        new (): HTMLJoyCompanyAvatarElement;
    };
    interface HTMLJoyCounterElement extends Components.JoyCounter, HTMLStencilElement {
    }
    var HTMLJoyCounterElement: {
        prototype: HTMLJoyCounterElement;
        new (): HTMLJoyCounterElement;
    };
    interface HTMLJoyDialogElement extends Components.JoyDialog, HTMLStencilElement {
    }
    var HTMLJoyDialogElement: {
        prototype: HTMLJoyDialogElement;
        new (): HTMLJoyDialogElement;
    };
    interface HTMLJoyDialogTriggerElement extends Components.JoyDialogTrigger, HTMLStencilElement {
    }
    var HTMLJoyDialogTriggerElement: {
        prototype: HTMLJoyDialogTriggerElement;
        new (): HTMLJoyDialogTriggerElement;
    };
    interface HTMLJoyDividerCtaElement extends Components.JoyDividerCta, HTMLStencilElement {
    }
    var HTMLJoyDividerCtaElement: {
        prototype: HTMLJoyDividerCtaElement;
        new (): HTMLJoyDividerCtaElement;
    };
    interface HTMLJoyDropdownElement extends Components.JoyDropdown, HTMLStencilElement {
    }
    var HTMLJoyDropdownElement: {
        prototype: HTMLJoyDropdownElement;
        new (): HTMLJoyDropdownElement;
    };
    interface HTMLJoyDropzoneElement extends Components.JoyDropzone, HTMLStencilElement {
    }
    var HTMLJoyDropzoneElement: {
        prototype: HTMLJoyDropzoneElement;
        new (): HTMLJoyDropzoneElement;
    };
    interface HTMLJoyFormErrorElement extends Components.JoyFormError, HTMLStencilElement {
    }
    var HTMLJoyFormErrorElement: {
        prototype: HTMLJoyFormErrorElement;
        new (): HTMLJoyFormErrorElement;
    };
    interface HTMLJoyHighlightElement extends Components.JoyHighlight, HTMLStencilElement {
    }
    var HTMLJoyHighlightElement: {
        prototype: HTMLJoyHighlightElement;
        new (): HTMLJoyHighlightElement;
    };
    interface HTMLJoyIconElement extends Components.JoyIcon, HTMLStencilElement {
    }
    var HTMLJoyIconElement: {
        prototype: HTMLJoyIconElement;
        new (): HTMLJoyIconElement;
    };
    interface HTMLJoyIconButtonElement extends Components.JoyIconButton, HTMLStencilElement {
    }
    var HTMLJoyIconButtonElement: {
        prototype: HTMLJoyIconButtonElement;
        new (): HTMLJoyIconButtonElement;
    };
    interface HTMLJoyIndicatorElement extends Components.JoyIndicator, HTMLStencilElement {
    }
    var HTMLJoyIndicatorElement: {
        prototype: HTMLJoyIndicatorElement;
        new (): HTMLJoyIndicatorElement;
    };
    interface HTMLJoyIndicatorsElement extends Components.JoyIndicators, HTMLStencilElement {
    }
    var HTMLJoyIndicatorsElement: {
        prototype: HTMLJoyIndicatorsElement;
        new (): HTMLJoyIndicatorsElement;
    };
    interface HTMLJoyInputElement extends Components.JoyInput, HTMLStencilElement {
    }
    var HTMLJoyInputElement: {
        prototype: HTMLJoyInputElement;
        new (): HTMLJoyInputElement;
    };
    interface HTMLJoyLabelElement extends Components.JoyLabel, HTMLStencilElement {
    }
    var HTMLJoyLabelElement: {
        prototype: HTMLJoyLabelElement;
        new (): HTMLJoyLabelElement;
    };
    interface HTMLJoyLinkElement extends Components.JoyLink, HTMLStencilElement {
    }
    var HTMLJoyLinkElement: {
        prototype: HTMLJoyLinkElement;
        new (): HTMLJoyLinkElement;
    };
    interface HTMLJoyOptionElement extends Components.JoyOption, HTMLStencilElement {
    }
    var HTMLJoyOptionElement: {
        prototype: HTMLJoyOptionElement;
        new (): HTMLJoyOptionElement;
    };
    interface HTMLJoyPaginationElement extends Components.JoyPagination, HTMLStencilElement {
    }
    var HTMLJoyPaginationElement: {
        prototype: HTMLJoyPaginationElement;
        new (): HTMLJoyPaginationElement;
    };
    interface HTMLJoyPlaceholderButtonElement extends Components.JoyPlaceholderButton, HTMLStencilElement {
    }
    var HTMLJoyPlaceholderButtonElement: {
        prototype: HTMLJoyPlaceholderButtonElement;
        new (): HTMLJoyPlaceholderButtonElement;
    };
    interface HTMLJoyProductTourElement extends Components.JoyProductTour, HTMLStencilElement {
    }
    var HTMLJoyProductTourElement: {
        prototype: HTMLJoyProductTourElement;
        new (): HTMLJoyProductTourElement;
    };
    interface HTMLJoyProductTourSpotlightElement extends Components.JoyProductTourSpotlight, HTMLStencilElement {
    }
    var HTMLJoyProductTourSpotlightElement: {
        prototype: HTMLJoyProductTourSpotlightElement;
        new (): HTMLJoyProductTourSpotlightElement;
    };
    interface HTMLJoyProductTourTriggerElement extends Components.JoyProductTourTrigger, HTMLStencilElement {
    }
    var HTMLJoyProductTourTriggerElement: {
        prototype: HTMLJoyProductTourTriggerElement;
        new (): HTMLJoyProductTourTriggerElement;
    };
    interface HTMLJoyProgressBarElement extends Components.JoyProgressBar, HTMLStencilElement {
    }
    var HTMLJoyProgressBarElement: {
        prototype: HTMLJoyProgressBarElement;
        new (): HTMLJoyProgressBarElement;
    };
    interface HTMLJoyRadioElement extends Components.JoyRadio, HTMLStencilElement {
    }
    var HTMLJoyRadioElement: {
        prototype: HTMLJoyRadioElement;
        new (): HTMLJoyRadioElement;
    };
    interface HTMLJoyRadioGroupElement extends Components.JoyRadioGroup, HTMLStencilElement {
    }
    var HTMLJoyRadioGroupElement: {
        prototype: HTMLJoyRadioGroupElement;
        new (): HTMLJoyRadioGroupElement;
    };
    interface HTMLJoyRatingStarsElement extends Components.JoyRatingStars, HTMLStencilElement {
    }
    var HTMLJoyRatingStarsElement: {
        prototype: HTMLJoyRatingStarsElement;
        new (): HTMLJoyRatingStarsElement;
    };
    interface HTMLJoySelectElement extends Components.JoySelect, HTMLStencilElement {
    }
    var HTMLJoySelectElement: {
        prototype: HTMLJoySelectElement;
        new (): HTMLJoySelectElement;
    };
    interface HTMLJoySelectOptionElement extends Components.JoySelectOption, HTMLStencilElement {
    }
    var HTMLJoySelectOptionElement: {
        prototype: HTMLJoySelectOptionElement;
        new (): HTMLJoySelectOptionElement;
    };
    interface HTMLJoySelectableItemElement extends Components.JoySelectableItem, HTMLStencilElement {
    }
    var HTMLJoySelectableItemElement: {
        prototype: HTMLJoySelectableItemElement;
        new (): HTMLJoySelectableItemElement;
    };
    interface HTMLJoySelectableItemGroupElement extends Components.JoySelectableItemGroup, HTMLStencilElement {
    }
    var HTMLJoySelectableItemGroupElement: {
        prototype: HTMLJoySelectableItemGroupElement;
        new (): HTMLJoySelectableItemGroupElement;
    };
    interface HTMLJoySeparatorElement extends Components.JoySeparator, HTMLStencilElement {
    }
    var HTMLJoySeparatorElement: {
        prototype: HTMLJoySeparatorElement;
        new (): HTMLJoySeparatorElement;
    };
    interface HTMLJoySnackbarElement extends Components.JoySnackbar, HTMLStencilElement {
    }
    var HTMLJoySnackbarElement: {
        prototype: HTMLJoySnackbarElement;
        new (): HTMLJoySnackbarElement;
    };
    interface HTMLJoySpinnerElement extends Components.JoySpinner, HTMLStencilElement {
    }
    var HTMLJoySpinnerElement: {
        prototype: HTMLJoySpinnerElement;
        new (): HTMLJoySpinnerElement;
    };
    interface HTMLJoyStepElement extends Components.JoyStep, HTMLStencilElement {
    }
    var HTMLJoyStepElement: {
        prototype: HTMLJoyStepElement;
        new (): HTMLJoyStepElement;
    };
    interface HTMLJoyStepperElement extends Components.JoyStepper, HTMLStencilElement {
    }
    var HTMLJoyStepperElement: {
        prototype: HTMLJoyStepperElement;
        new (): HTMLJoyStepperElement;
    };
    interface HTMLJoyTabElement extends Components.JoyTab, HTMLStencilElement {
    }
    var HTMLJoyTabElement: {
        prototype: HTMLJoyTabElement;
        new (): HTMLJoyTabElement;
    };
    interface HTMLJoyTabButtonElement extends Components.JoyTabButton, HTMLStencilElement {
    }
    var HTMLJoyTabButtonElement: {
        prototype: HTMLJoyTabButtonElement;
        new (): HTMLJoyTabButtonElement;
    };
    interface HTMLJoyTabsElement extends Components.JoyTabs, HTMLStencilElement {
    }
    var HTMLJoyTabsElement: {
        prototype: HTMLJoyTabsElement;
        new (): HTMLJoyTabsElement;
    };
    interface HTMLJoyTagElement extends Components.JoyTag, HTMLStencilElement {
    }
    var HTMLJoyTagElement: {
        prototype: HTMLJoyTagElement;
        new (): HTMLJoyTagElement;
    };
    interface HTMLJoyTagsInputElement extends Components.JoyTagsInput, HTMLStencilElement {
    }
    var HTMLJoyTagsInputElement: {
        prototype: HTMLJoyTagsInputElement;
        new (): HTMLJoyTagsInputElement;
    };
    interface HTMLJoyTagsListElement extends Components.JoyTagsList, HTMLStencilElement {
    }
    var HTMLJoyTagsListElement: {
        prototype: HTMLJoyTagsListElement;
        new (): HTMLJoyTagsListElement;
    };
    interface HTMLJoyTextElement extends Components.JoyText, HTMLStencilElement {
    }
    var HTMLJoyTextElement: {
        prototype: HTMLJoyTextElement;
        new (): HTMLJoyTextElement;
    };
    interface HTMLJoyTextareaElement extends Components.JoyTextarea, HTMLStencilElement {
    }
    var HTMLJoyTextareaElement: {
        prototype: HTMLJoyTextareaElement;
        new (): HTMLJoyTextareaElement;
    };
    interface HTMLJoyToggleElement extends Components.JoyToggle, HTMLStencilElement {
    }
    var HTMLJoyToggleElement: {
        prototype: HTMLJoyToggleElement;
        new (): HTMLJoyToggleElement;
    };
    interface HTMLJoyTooltipElement extends Components.JoyTooltip, HTMLStencilElement {
    }
    var HTMLJoyTooltipElement: {
        prototype: HTMLJoyTooltipElement;
        new (): HTMLJoyTooltipElement;
    };
    interface HTMLJoyTooltipTriggerElement extends Components.JoyTooltipTrigger, HTMLStencilElement {
    }
    var HTMLJoyTooltipTriggerElement: {
        prototype: HTMLJoyTooltipTriggerElement;
        new (): HTMLJoyTooltipTriggerElement;
    };
    interface HTMLJoyUserCardElement extends Components.JoyUserCard, HTMLStencilElement {
    }
    var HTMLJoyUserCardElement: {
        prototype: HTMLJoyUserCardElement;
        new (): HTMLJoyUserCardElement;
    };
    interface HTMLElementTagNameMap {
        "joy-availability": HTMLJoyAvailabilityElement;
        "joy-avatar": HTMLJoyAvatarElement;
        "joy-avatars-list": HTMLJoyAvatarsListElement;
        "joy-backdrop": HTMLJoyBackdropElement;
        "joy-badge-level": HTMLJoyBadgeLevelElement;
        "joy-bottom-sheet": HTMLJoyBottomSheetElement;
        "joy-button": HTMLJoyButtonElement;
        "joy-checkbox": HTMLJoyCheckboxElement;
        "joy-company-avatar": HTMLJoyCompanyAvatarElement;
        "joy-counter": HTMLJoyCounterElement;
        "joy-dialog": HTMLJoyDialogElement;
        "joy-dialog-trigger": HTMLJoyDialogTriggerElement;
        "joy-divider-cta": HTMLJoyDividerCtaElement;
        "joy-dropdown": HTMLJoyDropdownElement;
        "joy-dropzone": HTMLJoyDropzoneElement;
        "joy-form-error": HTMLJoyFormErrorElement;
        "joy-highlight": HTMLJoyHighlightElement;
        "joy-icon": HTMLJoyIconElement;
        "joy-icon-button": HTMLJoyIconButtonElement;
        "joy-indicator": HTMLJoyIndicatorElement;
        "joy-indicators": HTMLJoyIndicatorsElement;
        "joy-input": HTMLJoyInputElement;
        "joy-label": HTMLJoyLabelElement;
        "joy-link": HTMLJoyLinkElement;
        "joy-option": HTMLJoyOptionElement;
        "joy-pagination": HTMLJoyPaginationElement;
        "joy-placeholder-button": HTMLJoyPlaceholderButtonElement;
        "joy-product-tour": HTMLJoyProductTourElement;
        "joy-product-tour-spotlight": HTMLJoyProductTourSpotlightElement;
        "joy-product-tour-trigger": HTMLJoyProductTourTriggerElement;
        "joy-progress-bar": HTMLJoyProgressBarElement;
        "joy-radio": HTMLJoyRadioElement;
        "joy-radio-group": HTMLJoyRadioGroupElement;
        "joy-rating-stars": HTMLJoyRatingStarsElement;
        "joy-select": HTMLJoySelectElement;
        "joy-select-option": HTMLJoySelectOptionElement;
        "joy-selectable-item": HTMLJoySelectableItemElement;
        "joy-selectable-item-group": HTMLJoySelectableItemGroupElement;
        "joy-separator": HTMLJoySeparatorElement;
        "joy-snackbar": HTMLJoySnackbarElement;
        "joy-spinner": HTMLJoySpinnerElement;
        "joy-step": HTMLJoyStepElement;
        "joy-stepper": HTMLJoyStepperElement;
        "joy-tab": HTMLJoyTabElement;
        "joy-tab-button": HTMLJoyTabButtonElement;
        "joy-tabs": HTMLJoyTabsElement;
        "joy-tag": HTMLJoyTagElement;
        "joy-tags-input": HTMLJoyTagsInputElement;
        "joy-tags-list": HTMLJoyTagsListElement;
        "joy-text": HTMLJoyTextElement;
        "joy-textarea": HTMLJoyTextareaElement;
        "joy-toggle": HTMLJoyToggleElement;
        "joy-tooltip": HTMLJoyTooltipElement;
        "joy-tooltip-trigger": HTMLJoyTooltipTriggerElement;
        "joy-user-card": HTMLJoyUserCardElement;
    }
}
declare namespace LocalJSX {
    interface JoyAvailability {
        /**
          * isPartial dot, define fill or stroke dot display
         */
        "isPartial"?: boolean;
        /**
          * Text Availability content, if null, only dot will be display
         */
        "label"?: string | null;
        /**
          * Status Availability, define color
         */
        "status"?: 'AVAILABLE' | 'AVAILABLE_AND_VERIFIED' | 'NOT_AVAILABLE_WITH_DATE' | 'AVAILABLE_SOON' | 'NOT_AVAILABLE' | '';
    }
    interface JoyAvatar {
        /**
          * Specify a background color. Handy for avatars list. The value is the index of css custom property array made from CSS Custom Properties value (see next table)
         */
        "color"?: AvatarColors['freelancer'];
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "compress"?: boolean;
        /**
          * Freelancer full name. Will be used to display its initials if no photoUrl is given.
         */
        "fullName"?: string;
        /**
          * Url you need to link your avatar to
         */
        "href"?: string;
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "isFirstFromList"?: boolean;
        /**
          * Specify a photo url to display.
         */
        "photoUrl"?: string;
        /**
          * Avatar size, 3 possible values (can't be overridden)
         */
        "size"?: AvatarSizes;
        /**
          * Target attribute if href is used
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | 'framename';
        /**
          * Specify the total amount of persons remaining from a list.
         */
        "totalNumber"?: number;
        /**
          * Specify the link to redirect to the full list
         */
        "totalNumberLink"?: string;
    }
    interface JoyAvatarsList {
        /**
          * How avatars are spread. With a gap, or overlaped
         */
        "compress"?: boolean;
    }
    interface JoyBackdrop {
        "onJoy-backdrop-click"?: (event: CustomEvent<BackDropOrigin>) => void;
        /**
          * The backdrop can be created from many components *
         */
        "origin": BackDropOrigin;
    }
    interface JoyBadgeLevel {
        /**
          * SuperMalter level from 1 to 3
         */
        "superMalterLevel"?: number;
        /**
          * Badge type: highpotential, high-potential-auto, maltlinker, new, supermalter or verified or program: program_highpotential
         */
        "type": JoyBadgeLevelEnum | JoyBadgeProgramEnum;
        /**
          * Display text label
         */
        "visibleText"?: boolean;
    }
    interface JoyBottomSheet {
        /**
          * close-label used for close button. Default: 'Close'
         */
        "closeLabel"?: string;
        /**
          * close-variant used for close button. Default: 'primary' See: joy-button documentation
         */
        "closeVariant"?: ButtonVariants;
        /**
          * Custom event fired when user close bottom sheet
         */
        "onJoy-bottom-sheet-closed"?: (event: CustomEvent<void>) => void;
    }
    interface JoyButton {
        /**
          * Disabled attribute for buttons
         */
        "disabled"?: boolean;
        /**
          * If the link as a downloadable content
         */
        "download"?: string | undefined;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Set the icon name if you need one
         */
        "icon"?: string;
        /**
          * Set the button in loading state
         */
        "loading"?: boolean;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Button or Link size
         */
        "size"?: ButtonSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Type attribute for buttons
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Button or Link color theme
         */
        "variant"?: ButtonVariants;
    }
    interface JoyCheckbox {
        /**
          * Checkbox activated or not
         */
        "checked"?: boolean;
        /**
          * Disabled state
         */
        "disabled"?: boolean;
        /**
          * It will be applied as the hidden input name attribute (for the actual form)
         */
        "name"?: string;
        /**
          * Clicking on the component will fire this customEvent (more checkbox specific event)
         */
        "onJoy-checkbox-change"?: (event: CustomEvent<boolean>) => void;
        /**
          * Clicking on the component will fire this customEvent
         */
        "onValue-change"?: (event: CustomEvent<boolean>) => void;
        /**
          * Checkbox is required
         */
        "required"?: boolean;
        /**
          * Input value. Input value != checked state ! If you need to get the state checked/not checked, simply use checked prop
         */
        "value"?: string;
    }
    interface JoyCompanyAvatar {
        /**
          * @deprecated Company avatar color
         */
        "color"?: AvatarColors['company'];
        /**
          * Company name. Required to give image alt text.
         */
        "companyName"?: string;
        /**
          * URL source for img. Optional.
         */
        "imgSrc"?: string;
        /**
          * Size of the image. Optionnal.
         */
        "size"?: AvatarSizes;
    }
    interface JoyCounter {
        /**
          * aria-label used for input accessibility. Use string only, no HTML. More than welcome !
         */
        "ariaLabel"?: string;
        /**
          * Invalid state of the component
         */
        "invalid"?: boolean;
        /**
          * Message when the component is invalid. Warning : by default, it will pick HTML5 validation message (the language is defined by your OS)
         */
        "invalidMessage"?: string;
        /**
          * Used for accessibility aria-label attribute. More than welcome !
         */
        "labelDecrement"?: string;
        /**
          * Used for accessibility aria-label attribute. More than welcome !
         */
        "labelIncrement"?: string;
        /**
          * The label input's size.
         */
        "labelSize"?: LabelSizes;
        /**
          * Maximum possible value. No default
         */
        "max"?: number;
        /**
          * Minimum possible value. Default to 0
         */
        "min"?: number;
        /**
          * Name for the input
         */
        "name"?: string;
        /**
          * Specific event fired when you decrement the counter value. Prefer using valueChange unless you need to handle this specific event type
         */
        "onJoy-counter-decrement"?: (event: CustomEvent<number>) => void;
        /**
          * Specific event fired when you increment the counter value. Prefer using valueChange unless you need to handle this specific event type
         */
        "onJoy-counter-increment"?: (event: CustomEvent<number>) => void;
        /**
          * Specific event fired when your counter value is invalid.
         */
        "onJoy-counter-invalid"?: (event: CustomEvent<{value: string; message: string}>) => void;
        /**
          * Generic event for any counter change, fired by manually typing a value or using increment/decrement CTA
         */
        "onValue-change"?: (event: CustomEvent<number>) => void;
        /**
          * Inject the right wording if your field is not required. the "-" separator is already handled internally. *
         */
        "optionalLabel"?: string;
        /**
          * Counter requirement
         */
        "required"?: boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark"?: boolean;
        /**
          * Granularity of the input. We use the same name than native step attribute. We don't bind this prop to actual input step attribute, because we don't want checkValidity API to return invalid if the actual value is not a multiple of step prop !
         */
        "step"?: number;
        /**
          * Counter value *
         */
        "value"?: number;
    }
    interface JoyDialog {
        /**
          * Choose whether backdrop is injected at the root of the body or next to the dialog itself. If a parent element has some media queries rules and is getting hidden at some point, injecting the backdrop next to the dialog is a good way to prevent issues. Default to body.
         */
        "appendBackdrop"?: 'body' | 'sibling';
        /**
          * Set the height of the banner. Default to 250
         */
        "bannerHeight"?: number | undefined;
        /**
          * Set the position of the banner image. Work exactly like css background-position property
         */
        "bannerPosition"?: string;
        /**
          * Set the URL of the image you can inject as pre-header banner
         */
        "bannerSrc"?: string;
        /**
          * Set the alt text of the banner
         */
        "bannerSrcAlt"?: string;
        /**
          * If you want to change the CTA sizes, please choose between small, medium, large
         */
        "buttonSize"?: ButtonSizes;
        /**
          * Secondary CTA text. If none given, it won't show the CTA
         */
        "cancelText"?: string;
        /**
          * Main CTA text. If none given, it won't show the CTA
         */
        "confirmText"?: string;
        "demo"?: boolean;
        /**
          * Custom event fired when clicking on cancel button or cross icon
         */
        "onJoy-cancel-dialog"?: (event: CustomEvent<void>) => void;
        /**
          * Custom event fired when clicking on confirm button
         */
        "onJoy-confirm-dialog"?: (event: CustomEvent<void>) => void;
        /**
          * Dialog open state
         */
        "open"?: boolean;
        /**
          * Dialog sizes
         */
        "size"?: DialogSizes;
    }
    interface JoyDialogTrigger {
        /**
          * The ID of the dialog you want to show. Required *
         */
        "dialog": string;
        /**
          * For dialogs containing joy-indicators with multiple steps, you can specify a step number *
         */
        "step"?: number;
    }
    interface JoyDividerCta {
        /**
          * Disabled or not
         */
        "disabled"?: boolean;
    }
    interface JoyDropdown {
        /**
          * By default, the dropdown is closed if you focusout the dropdown. For debugging purpose or specific behavior, you can toggle off this option. *
         */
        "closeOnBlur"?: boolean;
        /**
          * Disabled state. *
         */
        "disabled"?: boolean;
        /**
          * Pick an icon displayed before the label. *
         */
        "icon"?: string;
        /**
          * Invalid state. *
         */
        "invalid"?: boolean;
        /**
          * Invalid state message. *
         */
        "invalidMessage"?: string;
        /**
          * Select name attribute to be found by parent form. *
         */
        "name"?: string;
        "onValue-change"?: (event: CustomEvent<{value: string}>) => void;
        /**
          * Mandatory or not. *
         */
        "required"?: boolean;
        /**
          * Select actual value. *
         */
        "value"?: string;
    }
    interface JoyDropzone {
        /**
          * Add accepted file formats
         */
        "accept"?: string;
        /**
          * Add CTA Cancellation Text
         */
        "buttonCancelText"?: string;
        /**
          * Add CTA Upload Text
         */
        "buttonText"?: string;
        /**
          * Add description Text
         */
        "descriptionStrongText"?: string;
        /**
          * Add description Text
         */
        "descriptionText"?: string;
        /**
          * Makes the dropzone disabled or not
         */
        "disabled"?: boolean;
        /**
          * Add custom error message when uploaded file format is not accepted
         */
        "errorTextFormat"?: string;
        /**
          * Add custom error message when uploaded file size is bigger than maxSize
         */
        "errorTextMaxSize"?: string;
        /**
          * set a unique id for the input file
         */
        "idDropzone"?: string;
        /**
          * Makes the dropzone invalid or not
         */
        "invalid"?: boolean;
        /**
          * Add legend/specification text
         */
        "legend"?: string | null;
        /**
          * Make the dropzone in progress state or not
         */
        "loading"?: boolean;
        /**
          * set MaxSize (Megabytes), default to 32 MB
         */
        "maxSize"?: number;
        /**
          * Enable multiple files upload
         */
        "multiple"?: boolean;
        "onJoy-dropzone-buttons-click"?: (event: CustomEvent<null>) => void;
        "onJoy-dropzone-cancel-upload-file"?: (event: CustomEvent<File[] | null>) => void;
        "onJoy-dropzone-dropped-files"?: (event: CustomEvent<File[] | null>) => void;
        "onJoy-dropzone-invalidate-file"?: (event: CustomEvent<File[] | null>) => void;
        "onJoy-dropzone-remove-file"?: (event: CustomEvent<File | null>) => void;
        /**
          * Add Uploading Text
         */
        "uploadingText"?: string;
    }
    interface JoyFormError {
        /**
          * The error text. Plain string required as any HTML injected will be escaped
         */
        "noHtmlErrorText"?: string;
        /**
          * Depending on contexts : maybe you'll need to insert it in the DOM but hide it, or injecting it into the DOM on the fly (like Vue v-if cases)
         */
        "visible"?: boolean;
    }
    interface JoyHighlight {
        /**
          * Add the left border accent on the highlight.
         */
        "accent"?: boolean;
        /**
          * Allows to display the level status icon
         */
        "displayIcon"?: boolean;
        /**
          * Override the icon type used for level. Size can't be overridden. Won't show if displayIcon prop isn't set to true
         */
        "icon"?: string;
        /**
          * Defines the criticalness of the highlight
         */
        "level"?: HighlightLevels;
    }
    interface JoyIcon {
        /**
          * Defines a non-visible legend
         */
        "ariaLabel"?: string;
        /**
          * Two-tone icon when set to true
         */
        "bicolor"?: boolean;
        /**
          * Color change on hover
         */
        "clickable"?: boolean;
        /**
          * The icon color
         */
        "color"?: IconColors;
        /**
          * The icon custom class(es), if needed
         */
        "customClass"?: string;
        /**
          * Full colored icon when set to true
         */
        "full"?: boolean;
        /**
          * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
         */
        "lazy"?: boolean;
        /**
          * The icon svg filename
         */
        "name"?: string;
        /**
          * The icon size
         */
        "size"?: IconsSizes;
    }
    interface JoyIconButton {
        /**
          * The icon color. Default is the blue version. You can only override it with the white version.
         */
        "color"?: IconButtonColors;
        /**
          * The icon name
         */
        "icon"?: string;
        /**
          * use @joyIconButtonClick="yourMethod" for Vue apps (onJoyIconButtonClick for other stencil components) to handle snackbar close. Nothing is returned
         */
        "onJoy-icon-button-click"?: (event: CustomEvent<void>) => void;
        /**
          * The button type. As the component wraps an actual HTML button element, it will be applied to it.
         */
        "type"?: 'button';
    }
    interface JoyIndicator {
        /**
          * Generic event fired when clicking the joy-indicator.
         */
        "onJoy-indicator-select"?: (event: CustomEvent<{index: number}>) => void;
        "onJoy-indicator-select-for-dialog"?: (event: CustomEvent<{index: number}>) => void;
        "selected"?: boolean;
        "variant"?: IndicatorsVariants;
    }
    interface JoyIndicators {
        "onJoy-indicators-change"?: (event: CustomEvent<number>) => void;
        /**
          * Selected state *
         */
        "selected"?: number;
        /**
          * Variant colors. 2 possibles values *
         */
        "variant"?: IndicatorsVariants;
    }
    interface JoyInput {
        /**
          * The input's autocomplete policy.
         */
        "autocomplete"?: string;
        /**
          * Makes the field disabled or not
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * Add an icon on the left side before the value
         */
        "icon"?: string;
        /**
          * A hint to the browser for which keyboard to display.
         */
        "inputmode"?: 'none' | 'decimal' | 'text' | 'numeric' | 'tel' | 'search' | 'email' | 'url';
        /**
          * Makes the field readonly or not
         */
        "invalid"?: boolean;
        /**
          * The label input's size.
         */
        "labelSize"?: LabelSizes;
        /**
          * If the type is "number" then you can use max property.
         */
        "max"?: number;
        /**
          * Max character number. https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/maxlength
         */
        "maxlength"?: number;
        /**
          * If the type is "number" then you can use min property.
         */
        "min"?: number;
        /**
          * Max character number. https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/minlength
         */
        "minlength"?: number;
        /**
          * Input types. List is not exhaustive, this component does not deal with checkboxes, radios, files, dates.
         */
        "name"?: string;
        /**
          * Custom event that returns the component instance and its actual value. Binded to input native event *
         */
        "onJoy-input-change"?: (event: CustomEvent<{element: HTMLJoyInputElement; value?: string}>) => void;
        /**
          * Generic custom event that returns the component instance and its actual value. Can be used for custom model directives (frameworks) *
         */
        "onValue-change"?: (event: CustomEvent<{element: HTMLJoyInputElement; value?: string}>) => void;
        /**
          * Inject the right wording if your field is not required. the "-" separator is already handled internally. *
         */
        "optionalLabel"?: string;
        /**
          * A regular expression that the value is checked against. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
         */
        "pattern"?: string;
        /**
          * The input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * Makes the field readonly or not
         */
        "readonly"?: boolean;
        /**
          * Makes the field required
         */
        "required"?: boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark"?: boolean;
        /**
          * The input's size.
         */
        "size"?: InputSizes;
        /**
          * If the type is "number" then you can use step property.
         */
        "step"?: number | 'any';
        /**
          * Input types. List is not exhaustive, this component does not deal with checkboxes, radios, files, dates. The type=number state is not appropriate for input that happens to only consist of numbers but isn’t strictly speaking a number (credit card number for example)
         */
        "type"?: 'hidden' | 'text' | 'number' | 'search' | 'email' | 'password' | 'tel';
        /**
          * If the field is of type number, you can specify a unit like %, days, hours, whatever you want
         */
        "unit"?: string;
        /**
          * Field value
         */
        "value"?: string;
    }
    interface JoyLabel {
        /**
          * for attribute to associate label to an input *
         */
        "htmlFor"?: string;
        /**
          * Inject the right wording if your field is not required. the "-" separator is already handled internally. *
         */
        "optionalLabel"?: string;
        /**
          * Required status of parent form field *
         */
        "required"?: boolean;
        /**
          * Label size *
         */
        "size"?: LabelSizes;
    }
    interface JoyLink {
        /**
          * Filename of the downloadable content
         */
        "download"?: string;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Icon name if you want to display one, before the text
         */
        "icon"?: string;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Color theme. Default is teal, you can set white theme for darker backgrounds.
         */
        "theme"?: LinksColors;
    }
    interface JoyOption {
        /**
          * Disabled state. *
         */
        "disabled"?: boolean;
        /**
          * For dropdown use, you can transform your option in link *
         */
        "href"?: string;
        /**
          * If the option is selected or not *
         */
        "selected"?: boolean;
        /**
          * Value bubbled up to the select component *
         */
        "value": string;
    }
    interface JoyPagination {
        /**
          * Current page number
         */
        "currentPage"?: number;
        /**
          * data-heap attribute for next CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapNext"?: string;
        /**
          * data-heap attribute for previous CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapPrev"?: string;
        /**
          * Can be used as title and aria-label attributes for the next CTA
         */
        "labelNext"?: string | undefined;
        /**
          * Can be used as aria-label attribute for the full component
         */
        "labelPagination"?: string;
        /**
          * Can be used as title and aria-label attributes for the previous CTA
         */
        "labelPrev"?: string | undefined;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for next CTA
         */
        "linkNext"?: string;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for previous CTA
         */
        "linkPrev"?: string;
        /**
          * use @joyChangePage="yourMethod" for Vue apps, to handle pagination change. Clicked page is returned
         */
        "onJoy-pagination-change-page"?: (event: CustomEvent<number>) => void;
        /**
          * Total number of pages in order to construct the pagination
         */
        "totalPages"?: number;
    }
    interface JoyPlaceholderButton {
        /**
          * use @joy-placeholder-button-click="yourMethod" for Vue apps
         */
        "onJoy-placeholder-button-click"?: (event: CustomEvent<void>) => void;
        /**
          * Placeholder button sizes.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface JoyProductTour {
        /**
          * Overlay is useful to prevent user interactions with elements that are below when the product tour is open. It can be disabled if the highlighted target element needs to be interactive but one of its parent node has its own stacking context (e.g. a parent with a lower z-index). Then the whole page will be interactive.
         */
        "disableOverlay"?: boolean;
        /**
          * Product-tour can be hidden by 3 elements by default, dismiss bottom CTA, top-right corner icon, and backdrop. If you don't want the backdrop click to close the product-tour, use "not-backdrop" value.
         */
        "dismissedBy"?: 'all' | 'not-backdrop';
        /**
          * Icon name, placed left to the title
         */
        "icon"?: string;
        /**
          * Set a max width for your container
         */
        "maxWidth"?: number | undefined;
        "onJoy-product-tour-dismiss"?: (event: CustomEvent<HTMLJoyProductTourElement>) => void;
        /**
          * Product tour open state
         */
        "open"?: boolean;
        /**
          * Product tour position according to highlighted content
         */
        "position"?: Positions;
        /**
          * Padding around the spotlight area. Value in pixel
         */
        "spotlightPadding"?: number;
        /**
          * If multiple product tour are need, specify the current step number
         */
        "step"?: number | undefined;
        /**
          * If multiple product tour are need, specify the amount
         */
        "steps"?: number;
    }
    interface JoyProductTourSpotlight {
    }
    interface JoyProductTourTrigger {
        /**
          * The ID of the product tour you want to show. Required *
         */
        "productTour": string;
        /**
          * If `true` the product tour will be displayed immediately *
         */
        "showOnLoad"?: boolean;
        /**
          * For dialogs containing joy-indicators with multiple steps, you can specify a step number *
         */
        "step"?: number;
        /**
          * Target of the trigger. If none given, it will be this component. *
         */
        "target"?: string;
    }
    interface JoyProgressBar {
        /**
          * Current step number.
         */
        "currentStep"?: number | undefined;
        /**
          * Activate specific color mode. Documentation purpose.
         */
        "mode"?: 'desktop' | 'mobile';
        /**
          * When the progress bar gets updated
         */
        "onJoy-progress-bar-update"?: (event: CustomEvent<void>) => void;
        /**
          * Progress bar percentage, percentage usage will override steps & currentStep definition.
         */
        "percentage"?: number | undefined;
        /**
          * Total number of steps.
         */
        "steps"?: number | undefined;
    }
    interface JoyRadio {
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled"?: boolean;
        /**
          * Field name. Given by parent component
         */
        "name": string;
        /**
          * When radio is blurred *
         */
        "onJoy-radio-blur"?: (event: CustomEvent<void>) => void;
        /**
          * When radio is selected *
         */
        "onJoy-radio-click"?: (event: CustomEvent<void>) => void;
        /**
          * When radio is focused *
         */
        "onJoy-radio-focus"?: (event: CustomEvent<void>) => void;
        /**
          * Field is required
         */
        "required"?: boolean;
        /**
          * Defines the type of the radio 'default' or 'outline'
         */
        "type"?: FormPickerTypes;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface JoyRadioGroup {
        /**
          * Label displayed for the whoe radio group.
         */
        "direction"?: 'vertical' | 'horizontal';
        /**
          * Invalid state of the radio group
         */
        "invalid"?: boolean;
        /**
          * Invalid message
         */
        "invalidText"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed. Use this specific event if you use expandable options containing various inputs.
         */
        "onJoy-radio-group-value-change"?: (event: CustomEvent<RadioGroupValue>) => void;
        /**
          * Emitted when the value has changed. WARNING : this event has a generic name used by other form elements ! Using it can create conflicts !
         */
        "onValue-change"?: (event: CustomEvent<RadioGroupValue>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface JoyRatingStars {
        /**
          * The actual rating, between 0 and 5.
         */
        "ratingValue"?: number;
        /**
          * Review count. it will be displayed with parenthesis : (5)
         */
        "reviewCount"?: number;
        /**
          * Star size. 3 possible values but you can't give a number as value
         */
        "size"?: RatingStarsSizes;
    }
    interface JoySelect {
        /**
          * Disabled state. *
         */
        "disabled"?: boolean;
        /**
          * Invalid state. *
         */
        "invalid"?: boolean;
        /**
          * Invalid state message. *
         */
        "invalidMessage"?: string;
        /**
          * The label text.
         */
        "label"?: string;
        /**
          * The label input's size.
         */
        "labelSize"?: LabelSizes;
        /**
          * Select name attribute to be found by parent form. *
         */
        "name"?: string;
        /**
          * Custom event that returns the component instance and its actual value. Binded to select native event *
         */
        "onJoy-select-change"?: (event: CustomEvent<{element: HTMLJoySelectElement; value?: string}>) => void;
        /**
          * Generic custom event name. Name is used by any form field *
         */
        "onValue-change"?: (event: CustomEvent<{element: HTMLJoySelectElement; value?: string}>) => void;
        /**
          * Mandatory or not. *
         */
        "required"?: boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark"?: boolean;
        /**
          * Mandatory or not. *
         */
        "value"?: string;
    }
    interface JoySelectOption {
        /**
          * Disabled state. *
         */
        "disabled"?: boolean;
        /**
          * If the option is selected or not *
         */
        "selected"?: boolean;
        /**
          * Value bubbled up to the select component *
         */
        "value": string;
    }
    interface JoySelectableItem {
        /**
          * Checked state *
         */
        "checked"?: boolean;
        /**
          * Disabled state *
         */
        "disabled"?: boolean;
        /**
          * Name property for form participation *
         */
        "name"?: string;
        "onJoy-selectable-item-change"?: (event: CustomEvent<ChangeDetail>) => void;
        "onValue-change"?: (event: CustomEvent<ChangeDetail>) => void;
        /**
          * If you use this component with a joy-checkbox as slot: set the value only on the joy-checkbox, it will be automatically applied to it's parent *
         */
        "value"?: string;
    }
    interface JoySelectableItemGroup {
        /**
          * If set to true, css flex rule will by applied in order to take all horizontal space available *
         */
        "fullWidth"?: boolean;
        /**
          * If multiple is set to true, it means you'll have to add joy-checkbox items. If not, a hidden radio box is included *
         */
        "multiple"?: boolean;
        "onJoy-selectable-item-group-change"?: (event: CustomEvent<HTMLJoySelectableItemElement>) => void;
        /**
          * Selected item *
         */
        "value"?: string;
    }
    interface JoySeparator {
        /**
          * Separator size. 2 possible values : 100% width or adjusted size according to text
         */
        "size"?: SeparatorSizes;
        /**
          * The separator text
         */
        "text": string;
    }
    interface JoySnackbar {
        /**
          * Display an icon to close the notification manually
         */
        "closable"?: boolean;
        /**
          * HTML with your custom message injected in the component. It won't be escaped so please be careful with XSS !
         */
        "dangerousHtmlMessage": string;
        /**
          * Time in ms the snackbar is displayed. Give 'forever' to be able to display the snackbar without timeout
         */
        "duration"?: number | 'forever';
        /**
          * The criticality level of your notification. Range from simple info to error.
         */
        "level"?: SnackbarLevels;
        /**
          * Fire snackbar custom action. Nothing is returned
         */
        "onJoy-snackbar-trigger-action"?: (event: CustomEvent<void>) => void;
        /**
          * By default, the snackbar will be displayed in a fixed position at the bottom of the page. You can override this behavior by setting position="relative"
         */
        "position"?: 'fixed' | 'relative';
        /**
          * If you need to create an action link (like cancel an action from snackbar) simply pas its text. Clicking on it will trigger a custom event
         */
        "triggerActionText"?: string;
    }
    interface JoySpinner {
        /**
          * Spinner colors, 2 possible values
         */
        "color"?: string;
    }
    interface JoyStep {
        /**
          * If the step is completed. *
         */
        "completed"?: boolean;
        /**
          * Used to change style for mobile. *
         */
        "direction"?: Direction;
        /**
          * If the step is ongoing. *
         */
        "ongoing"?: boolean;
        /**
          * Default or small. *
         */
        "size"?: 'small' | 'default';
    }
    interface JoyStepper {
        /**
          * Used to change style for mobile. *
         */
        "direction"?: Direction;
        /**
          * Defines the CSS flex horizontal justify distribution *
         */
        "justify"?: boolean;
        /**
          * Set the step number of the stepper. Will auto-complete each step that is < step. Starts from 0. *
         */
        "step"?: number;
    }
    interface JoyTab {
        /**
          * Selected status of the current tab
         */
        "selected"?: boolean;
        /**
          * A tab id or name must be provided for each `joy-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabButton {
        /**
          * "data-heap" attribute to set on the link if an {@link href} prop is passed or on the host otherwise..
         */
        "heapId"?: string;
        /**
          * If your tab is a link, give the URL
         */
        "href"?: string;
        /**
          * Event used by joy-tabs parent component. Prefer using joyTabSelected event from joy-tabs if you want to listen to any tab change
         */
        "onJoy-tab-button-click"?: (event: CustomEvent<Tab>) => void;
        /**
          * Tab selection state
         */
        "selected"?: boolean;
        /**
          * A tab id or name must be provided for each `joy-button-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabs {
        /**
          * If you wanna catch the tab selection in the whole component, use this event
         */
        "onJoy-tab-selected"?: (event: CustomEvent<Tab>) => void;
        /**
          * Use this prop to activate a specific tab by default by giving its name
         */
        "selectedTab": string;
        /**
          * Use this prop to specify that your joy-tabs is made of links, and tabs are not updated on the fly
         */
        "sync"?: boolean;
    }
    interface JoyTag {
        /**
          * If the tag is a link, give it an href
         */
        "href"?: string;
        /**
          * Fired only if we've set the clickable prop
         */
        "onJoy-tag-click"?: (event: CustomEvent<{name: string; selected: boolean}>) => void;
        /**
          * Fired only if we've click on removable tag
         */
        "onJoy-tag-remove"?: (event: CustomEvent<string>) => void;
        /**
          * Display an icon CTA on the right, to remove the tag from a list. Only for primary/secondary
         */
        "removable"?: boolean;
        /**
          * Mock a radio like style. Nothing more. Only for primary/secondary
         */
        "selectable"?: boolean;
        /**
          * Tag size. Default is medium
         */
        "size"?: TagSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Tag color theme
         */
        "variant"?: TagVariants;
    }
    interface JoyTagsInput {
        /**
          * Invalid state
         */
        "invalid"?: boolean;
        /**
          * form name for our tags input
         */
        "name"?: string;
        /**
          * Triggered when we click on a tag suggestion
         */
        "onJoy-tags-input-add-suggestion"?: (event: CustomEvent<string>) => void;
        /**
          * On input blur
         */
        "onJoy-tags-input-blur"?: (event: CustomEvent<void>) => void;
        /**
          * When the tags list is on error. According to the returned ErrorType, you can display the right error.
         */
        "onJoy-tags-input-error"?: (event: CustomEvent<ErrorType>) => void;
        /**
          * On input focus
         */
        "onJoy-tags-input-focus"?: (event: CustomEvent<void>) => void;
        /**
          * When the tags list is updated
         */
        "onJoy-tags-input-update"?: (event: CustomEvent<string[]>) => void;
        /**
          * Placeholder used for the input
         */
        "placeholder"?: string;
        /**
          * Size for your tags. Check Tag documentation for available values
         */
        "size"?: TagSizes;
        /**
          * Allows to resort tag list with drag&drop
         */
        "sortableTags"?: boolean;
        /**
          * Suggestion of values. Allows to directly pick them instead of typing.
         */
        "suggestions"?: string;
        /**
          * Suggestion label. Not mandatory.
         */
        "suggestionsLabel"?: string;
        /**
          * Validation type : if 'email' is given, it will create a specific check before actually adding the tag. Default to none.
         */
        "validation"?: 'email' | 'none';
        /**
          * Saved values for the tags list. Must be an array like string eg. ['first', 'second'].
         */
        "values"?: string;
        /**
          * Variant/color type for your tags. Check Tag documentation for available values
         */
        "variant"?: TagVariants;
    }
    interface JoyTagsList {
        /**
          * Tags justify-content strategy. *
         */
        "align"?: 'center' | 'left' | 'right';
    }
    interface JoyText {
    }
    interface JoyTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow"?: boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
         */
        "fireFocusEvents"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true`, the textarea will be considered as invalid.
         */
        "invalid"?: boolean;
        /**
          * The label input's size.
         */
        "labelSize"?: LabelSizes;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Use this prop to give component the translation used to display minimum chars count.
         */
        "minlengthLabel"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onJoy-textarea-blur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onJoy-textarea-change"?: (event: CustomEvent<{value: string}>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onJoy-textarea-focus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onJoy-textarea-input"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when the value has changed. Generic event used by all other form fields
         */
        "onValue-change"?: (event: CustomEvent<void>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * Display the required mark or not. Default to false.
         */
        "requiredMark"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number | undefined;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface JoyToggle {
        /**
          * Toggle activated or not
         */
        "checked"?: boolean;
        /**
          * Disabled state
         */
        "disabled"?: boolean;
        /**
          * It will be applied as the hidden input name attribute (for the actual form)
         */
        "name"?: string;
        /**
          * Clicking on the component will fire this customEvent.
         */
        "onJoy-toggle-change"?: (event: CustomEvent<boolean>) => void;
        /**
          * Clicking on the component will fire this customEvent.
         */
        "onValue-change"?: (event: CustomEvent<boolean>) => void;
        /**
          * Input value. TODO : check if we really need it as we use a checkbox system
         */
        "value"?: string;
    }
    interface JoyTooltip {
        /**
          * Tooltip position. 2 possible values
         */
        "position"?: Positions;
        /**
          * Color theme. 2 possible values
         */
        "variant"?: TooltipVariants;
    }
    interface JoyTooltipTrigger {
        /**
          * Use basic selector to inject the tooltip in a specific DOM location. Default is body
         */
        "appendTo"?: 'body' | 'host';
        /**
          * Define the event needed to display the tooltip
         */
        "event"?: 'mouseenter' | 'click';
        /**
          * Tooltip position. 2 possible values
         */
        "position"?: 'left' | 'right';
        /**
          * Allows to override tooltip size. Allows to more easily calculate its position
         */
        "tooltipWidth"?: number;
        /**
          * Color theme. 2 possible values
         */
        "variant"?: TooltipVariants;
    }
    interface JoyUserCard {
        /**
          * Can be the freelancer's full name, or whatever you want. It will be placed at the top right part.
         */
        "fullName"?: string;
        /**
          * Giving a link will make the whole component wrapped by an hyperlink
         */
        "link"?: string;
        /**
          * Given the link, it will open the link in a new tab
         */
        "newTab"?: boolean;
        /**
          * Use this prop if you don't want to use the user-card-avatar slot.
         */
        "photoUrl"?: string;
        /**
          * Freelancer's public rating.
         */
        "ratingValue"?: string;
        /**
          * Can be the freelancer's job, a company name or whatever you want. It will be placed at the top right part, below title
         */
        "subTitle"?: string;
    }
    interface IntrinsicElements {
        "joy-availability": JoyAvailability;
        "joy-avatar": JoyAvatar;
        "joy-avatars-list": JoyAvatarsList;
        "joy-backdrop": JoyBackdrop;
        "joy-badge-level": JoyBadgeLevel;
        "joy-bottom-sheet": JoyBottomSheet;
        "joy-button": JoyButton;
        "joy-checkbox": JoyCheckbox;
        "joy-company-avatar": JoyCompanyAvatar;
        "joy-counter": JoyCounter;
        "joy-dialog": JoyDialog;
        "joy-dialog-trigger": JoyDialogTrigger;
        "joy-divider-cta": JoyDividerCta;
        "joy-dropdown": JoyDropdown;
        "joy-dropzone": JoyDropzone;
        "joy-form-error": JoyFormError;
        "joy-highlight": JoyHighlight;
        "joy-icon": JoyIcon;
        "joy-icon-button": JoyIconButton;
        "joy-indicator": JoyIndicator;
        "joy-indicators": JoyIndicators;
        "joy-input": JoyInput;
        "joy-label": JoyLabel;
        "joy-link": JoyLink;
        "joy-option": JoyOption;
        "joy-pagination": JoyPagination;
        "joy-placeholder-button": JoyPlaceholderButton;
        "joy-product-tour": JoyProductTour;
        "joy-product-tour-spotlight": JoyProductTourSpotlight;
        "joy-product-tour-trigger": JoyProductTourTrigger;
        "joy-progress-bar": JoyProgressBar;
        "joy-radio": JoyRadio;
        "joy-radio-group": JoyRadioGroup;
        "joy-rating-stars": JoyRatingStars;
        "joy-select": JoySelect;
        "joy-select-option": JoySelectOption;
        "joy-selectable-item": JoySelectableItem;
        "joy-selectable-item-group": JoySelectableItemGroup;
        "joy-separator": JoySeparator;
        "joy-snackbar": JoySnackbar;
        "joy-spinner": JoySpinner;
        "joy-step": JoyStep;
        "joy-stepper": JoyStepper;
        "joy-tab": JoyTab;
        "joy-tab-button": JoyTabButton;
        "joy-tabs": JoyTabs;
        "joy-tag": JoyTag;
        "joy-tags-input": JoyTagsInput;
        "joy-tags-list": JoyTagsList;
        "joy-text": JoyText;
        "joy-textarea": JoyTextarea;
        "joy-toggle": JoyToggle;
        "joy-tooltip": JoyTooltip;
        "joy-tooltip-trigger": JoyTooltipTrigger;
        "joy-user-card": JoyUserCard;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "joy-availability": LocalJSX.JoyAvailability & JSXBase.HTMLAttributes<HTMLJoyAvailabilityElement>;
            "joy-avatar": LocalJSX.JoyAvatar & JSXBase.HTMLAttributes<HTMLJoyAvatarElement>;
            "joy-avatars-list": LocalJSX.JoyAvatarsList & JSXBase.HTMLAttributes<HTMLJoyAvatarsListElement>;
            "joy-backdrop": LocalJSX.JoyBackdrop & JSXBase.HTMLAttributes<HTMLJoyBackdropElement>;
            "joy-badge-level": LocalJSX.JoyBadgeLevel & JSXBase.HTMLAttributes<HTMLJoyBadgeLevelElement>;
            "joy-bottom-sheet": LocalJSX.JoyBottomSheet & JSXBase.HTMLAttributes<HTMLJoyBottomSheetElement>;
            "joy-button": LocalJSX.JoyButton & JSXBase.HTMLAttributes<HTMLJoyButtonElement>;
            "joy-checkbox": LocalJSX.JoyCheckbox & JSXBase.HTMLAttributes<HTMLJoyCheckboxElement>;
            "joy-company-avatar": LocalJSX.JoyCompanyAvatar & JSXBase.HTMLAttributes<HTMLJoyCompanyAvatarElement>;
            "joy-counter": LocalJSX.JoyCounter & JSXBase.HTMLAttributes<HTMLJoyCounterElement>;
            "joy-dialog": LocalJSX.JoyDialog & JSXBase.HTMLAttributes<HTMLJoyDialogElement>;
            "joy-dialog-trigger": LocalJSX.JoyDialogTrigger & JSXBase.HTMLAttributes<HTMLJoyDialogTriggerElement>;
            "joy-divider-cta": LocalJSX.JoyDividerCta & JSXBase.HTMLAttributes<HTMLJoyDividerCtaElement>;
            "joy-dropdown": LocalJSX.JoyDropdown & JSXBase.HTMLAttributes<HTMLJoyDropdownElement>;
            "joy-dropzone": LocalJSX.JoyDropzone & JSXBase.HTMLAttributes<HTMLJoyDropzoneElement>;
            "joy-form-error": LocalJSX.JoyFormError & JSXBase.HTMLAttributes<HTMLJoyFormErrorElement>;
            "joy-highlight": LocalJSX.JoyHighlight & JSXBase.HTMLAttributes<HTMLJoyHighlightElement>;
            "joy-icon": LocalJSX.JoyIcon & JSXBase.HTMLAttributes<HTMLJoyIconElement>;
            "joy-icon-button": LocalJSX.JoyIconButton & JSXBase.HTMLAttributes<HTMLJoyIconButtonElement>;
            "joy-indicator": LocalJSX.JoyIndicator & JSXBase.HTMLAttributes<HTMLJoyIndicatorElement>;
            "joy-indicators": LocalJSX.JoyIndicators & JSXBase.HTMLAttributes<HTMLJoyIndicatorsElement>;
            "joy-input": LocalJSX.JoyInput & JSXBase.HTMLAttributes<HTMLJoyInputElement>;
            "joy-label": LocalJSX.JoyLabel & JSXBase.HTMLAttributes<HTMLJoyLabelElement>;
            "joy-link": LocalJSX.JoyLink & JSXBase.HTMLAttributes<HTMLJoyLinkElement>;
            "joy-option": LocalJSX.JoyOption & JSXBase.HTMLAttributes<HTMLJoyOptionElement>;
            "joy-pagination": LocalJSX.JoyPagination & JSXBase.HTMLAttributes<HTMLJoyPaginationElement>;
            "joy-placeholder-button": LocalJSX.JoyPlaceholderButton & JSXBase.HTMLAttributes<HTMLJoyPlaceholderButtonElement>;
            "joy-product-tour": LocalJSX.JoyProductTour & JSXBase.HTMLAttributes<HTMLJoyProductTourElement>;
            "joy-product-tour-spotlight": LocalJSX.JoyProductTourSpotlight & JSXBase.HTMLAttributes<HTMLJoyProductTourSpotlightElement>;
            "joy-product-tour-trigger": LocalJSX.JoyProductTourTrigger & JSXBase.HTMLAttributes<HTMLJoyProductTourTriggerElement>;
            "joy-progress-bar": LocalJSX.JoyProgressBar & JSXBase.HTMLAttributes<HTMLJoyProgressBarElement>;
            "joy-radio": LocalJSX.JoyRadio & JSXBase.HTMLAttributes<HTMLJoyRadioElement>;
            "joy-radio-group": LocalJSX.JoyRadioGroup & JSXBase.HTMLAttributes<HTMLJoyRadioGroupElement>;
            "joy-rating-stars": LocalJSX.JoyRatingStars & JSXBase.HTMLAttributes<HTMLJoyRatingStarsElement>;
            "joy-select": LocalJSX.JoySelect & JSXBase.HTMLAttributes<HTMLJoySelectElement>;
            "joy-select-option": LocalJSX.JoySelectOption & JSXBase.HTMLAttributes<HTMLJoySelectOptionElement>;
            "joy-selectable-item": LocalJSX.JoySelectableItem & JSXBase.HTMLAttributes<HTMLJoySelectableItemElement>;
            "joy-selectable-item-group": LocalJSX.JoySelectableItemGroup & JSXBase.HTMLAttributes<HTMLJoySelectableItemGroupElement>;
            "joy-separator": LocalJSX.JoySeparator & JSXBase.HTMLAttributes<HTMLJoySeparatorElement>;
            "joy-snackbar": LocalJSX.JoySnackbar & JSXBase.HTMLAttributes<HTMLJoySnackbarElement>;
            "joy-spinner": LocalJSX.JoySpinner & JSXBase.HTMLAttributes<HTMLJoySpinnerElement>;
            "joy-step": LocalJSX.JoyStep & JSXBase.HTMLAttributes<HTMLJoyStepElement>;
            "joy-stepper": LocalJSX.JoyStepper & JSXBase.HTMLAttributes<HTMLJoyStepperElement>;
            "joy-tab": LocalJSX.JoyTab & JSXBase.HTMLAttributes<HTMLJoyTabElement>;
            "joy-tab-button": LocalJSX.JoyTabButton & JSXBase.HTMLAttributes<HTMLJoyTabButtonElement>;
            "joy-tabs": LocalJSX.JoyTabs & JSXBase.HTMLAttributes<HTMLJoyTabsElement>;
            "joy-tag": LocalJSX.JoyTag & JSXBase.HTMLAttributes<HTMLJoyTagElement>;
            "joy-tags-input": LocalJSX.JoyTagsInput & JSXBase.HTMLAttributes<HTMLJoyTagsInputElement>;
            "joy-tags-list": LocalJSX.JoyTagsList & JSXBase.HTMLAttributes<HTMLJoyTagsListElement>;
            "joy-text": LocalJSX.JoyText & JSXBase.HTMLAttributes<HTMLJoyTextElement>;
            "joy-textarea": LocalJSX.JoyTextarea & JSXBase.HTMLAttributes<HTMLJoyTextareaElement>;
            "joy-toggle": LocalJSX.JoyToggle & JSXBase.HTMLAttributes<HTMLJoyToggleElement>;
            "joy-tooltip": LocalJSX.JoyTooltip & JSXBase.HTMLAttributes<HTMLJoyTooltipElement>;
            "joy-tooltip-trigger": LocalJSX.JoyTooltipTrigger & JSXBase.HTMLAttributes<HTMLJoyTooltipTriggerElement>;
            "joy-user-card": LocalJSX.JoyUserCard & JSXBase.HTMLAttributes<HTMLJoyUserCardElement>;
        }
    }
}
