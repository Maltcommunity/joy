/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AvatarColors, AvatarSizes, ButtonSizes, ButtonVariants, HighlightLevels, HyperLinksTargets, IconButtonColors, IconColors, IconsSizes, LinksColors, TagSizes, TagVariants, TipsLevel, TooltipVariants } from "./types";
export namespace Components {
    interface JoyAllCritical {
    }
    interface JoyAvailability {
        /**
          * isPartial dot, define fill or stroke dot display
         */
        "isPartial": boolean;
        /**
          * Text Availability content, if null, only dot will be display
         */
        "label": string | null;
        /**
          * Status Availability, define color
         */
        "status": 'AVAILABLE' | 'AVAILABLE_AND_VERIFIED' | 'NOT_AVAILABLE_WITH_DATE' | 'AVAILABLE_SOON' | 'NOT_AVAILABLE' | '';
    }
    interface JoyAvatar {
        /**
          * Specify a background color. Handy for avatars list. The value is the index of css custom property array made from CSS Custom Properties value (see next table)
         */
        "color"?: AvatarColors['freelancer'];
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "compress": boolean;
        /**
          * Freelancer full name. Will be used to display its initials if no photoUrl is given.
         */
        "fullName"?: string;
        /**
          * Url you need to link your avatar to
         */
        "href"?: string;
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "isFirstFromList": boolean;
        /**
          * Specify a photo url to display.
         */
        "photoUrl"?: string;
        /**
          * Avatar size, 3 possible values (can't be overridden)
         */
        "size"?: AvatarSizes;
        /**
          * Target attribute if href is used
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | 'framename';
        /**
          * Specify the total amount of persons remaining from a list.
         */
        "totalNumber"?: number;
        /**
          * Specify the link to redirect to the full list
         */
        "totalNumberLink"?: string;
    }
    interface JoyAvatarsList {
        /**
          * How avatars are spread. With a gap, or overlaped
         */
        "compress": boolean;
    }
    interface JoyBadgeLevel {
        /**
          * SuperMalter level from 1 to 3
         */
        "superMalterLevel": number;
        /**
          * Badge type: highpotential, maltlinker, new, supermalter or verified
         */
        "type": typeof badgeTypes[number];
        /**
          * Display text label
         */
        "visibleText": boolean;
    }
    interface JoyButton {
        /**
          * Allows to display the spinner while asynchronous tasks are pending
          * @param loading - loading status
          * @param timeout - if you want to display the loader during a specific timeout
         */
        "buttonLoading": (loading: boolean, timeout?: number) => Promise<void>;
        /**
          * Disabled attribute for buttons
         */
        "disabled": boolean;
        /**
          * If the link as a downloadable content
         */
        "download": boolean;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Set the icon name if you need one
         */
        "icon"?: string;
        /**
          * Set the button in loading state
         */
        "loading": boolean;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Button or Link size
         */
        "size": ButtonSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Type attribute for buttons
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * Button or Link color theme
         */
        "variant": ButtonVariants;
    }
    interface JoyCompanyAvatar {
        /**
          * Company avatar color
         */
        "color": AvatarColors['company'];
        /**
          * Company name. Required to give image alt text.
         */
        "companyName": string;
        /**
          * URL source for img. Optional.
         */
        "imgSrc"?: string;
        /**
          * Size of the image. Optionnal.
         */
        "size"?: AvatarSizes;
    }
    interface JoyFormError {
        /**
          * The error text. Plain string required as any HTML injected will be escaped
         */
        "noHtmlErrorText": string;
        /**
          * Depending on contexts : maybe you'll need to insert it in the DOM but hide it, or injecting it into the DOM on the fly (like Vue v-if cases)
         */
        "visible": boolean;
    }
    interface JoyHighlight {
        /**
          * Allows to display the level status icon
         */
        "displayIcon": boolean;
        /**
          * Override the icon type used for level. Size can't be overridden. Won't show if displayIcon prop isn't set to true
         */
        "icon"?: string;
        /**
          * Defines the criticalness of the highlight
         */
        "level": HighlightLevels;
    }
    interface JoyIcon {
        /**
          * Defines a non-visible legend
         */
        "ariaLabel"?: string;
        /**
          * Two-tone icon when set to true
         */
        "bicolor": boolean;
        /**
          * Color change on hover
         */
        "clickable": boolean;
        /**
          * The icon color
         */
        "color"?: IconColors;
        /**
          * The icon custom class(es), if needed
         */
        "customClass"?: string;
        /**
          * Full colored icon when set to true
         */
        "full": boolean;
        /**
          * The icon svg filename
         */
        "name": string;
        /**
          * The icon size
         */
        "size"?: IconsSizes;
    }
    interface JoyIconButton {
        /**
          * The icon color. Default is the blue version. You can only override it with the white version.
         */
        "color"?: IconButtonColors;
        /**
          * The icon name
         */
        "icon"?: string;
        /**
          * The button type. As the component wraps an actual HTML button element, it will be applied to it.
         */
        "type"?: 'button';
    }
    interface JoyLink {
        /**
          * If the link as a downloadable content
         */
        "download": boolean;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Icon name if you want to display one, before the text
         */
        "icon"?: string;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Color theme. Default is teal, you can set white theme for darker backgrounds.
         */
        "theme": LinksColors;
    }
    interface JoyPagination {
        /**
          * Current page number
         */
        "currentPage": number;
        /**
          * data-heap attribute for next CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapNext"?: string;
        /**
          * data-heap attribute for previous CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapPrev"?: string;
        /**
          * Can be used as title and aria-label attributes for the next CTA
         */
        "labelNext"?: string;
        /**
          * Can be used as aria-label attribute for the full component
         */
        "labelPagination"?: string;
        /**
          * Can be used as title and aria-label attributes for the previous CTA
         */
        "labelPrev"?: string;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for next CTA
         */
        "linkNext"?: string;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for previous CTA
         */
        "linkPrev"?: string;
        /**
          * Total number of pages in order to construct the pagination
         */
        "totalPages": number;
    }
    interface JoyPanel {
    }
    interface JoyProgressBar {
        /**
          * Current step number.
         */
        "currentStep": number | undefined;
        /**
          * Activate specific color mode. Documentation purpose.
         */
        "mode": 'desktop' | 'mobile';
        /**
          * Progress bar percentage, percentage usage will override steps & currentStep definition.
         */
        "percentage": number | undefined;
        /**
          * Total number of steps.
         */
        "steps": number | undefined;
    }
    interface JoySpinner {
        /**
          * Spinner colors, 2 possible values
         */
        "color"?: string;
    }
    interface JoyTab {
        /**
          * Selected status of the current tab
         */
        "selected": boolean;
        /**
          * Set the active component for the tab
         */
        "setActive": () => Promise<void>;
        /**
          * A tab id or name must be provided for each `joy-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabButton {
        /**
          * "data-heap" attribute to set on the link if an {@link href} prop is passed or on the host otherwise..
         */
        "heapId"?: string;
        /**
          * If your tab is a link, give the URL
         */
        "href"?: string;
        /**
          * Set the tabulation selected or not
          * @param status
         */
        "selectTabButton": (status: boolean) => Promise<void>;
        /**
          * Tab selection state
         */
        "selected": boolean;
        /**
          * A tab id or name must be provided for each `joy-button-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabs {
        /**
          * Use this prop to activate a specific tab by default by giving its name
         */
        "selectedTab": string;
        /**
          * Use this prop to specify that your joy-tabs is made of links, and tabs are not updated on the fly
         */
        "sync": boolean;
    }
    interface JoyTag {
        /**
          * If the tag is a link, give it an href
         */
        "href"?: string;
        /**
          * Display an icon CTA on the right, to remove the tag from a list. Only for primary/secondary
         */
        "removable": boolean;
        /**
          * Mock a radio like style. Nothing more. Only for primary/secondary
         */
        "selectable": boolean;
        /**
          * Tag size. Default is medium
         */
        "size": TagSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Tag color theme
         */
        "variant": TagVariants;
    }
    interface JoyTagsInput {
        /**
          * Get the array of values contained in the tag input
         */
        "getValues": () => Promise<string[]>;
        /**
          * Invalid state
         */
        "invalid": boolean;
        /**
          * form name for our tags input
         */
        "name"?: string;
        /**
          * Placeholder used for the input
         */
        "placeholder": string;
        /**
          * Size for your tags. Check Tag documentation for available values
         */
        "size": TagSizes;
        /**
          * Validation type : if 'email' is given, it will create a specific check before actually adding the tag. Default to none.
         */
        "validation": 'email' | 'none';
        /**
          * Saved values for the tags list. Must be an array like string eg. ['first', 'second'].
         */
        "values"?: string;
        /**
          * Variant/color type for your tags. Check Tag documentation for available values
         */
        "variant": TagVariants;
    }
    interface JoyTagsList {
    }
    interface JoyText {
    }
    interface JoyTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow": boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize": string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit": boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
         */
        "fireFocusEvents": boolean;
        /**
          * Returns the textarea nested in the component shadowDOM
          * @return - Returns the native `<textarea>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true`, the textarea will be considered as invalid.
         */
        "invalid": boolean;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Use this prop to give component the translation used to display minimum chars count.
         */
        "minlengthLabel"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number | undefined;
        /**
          * Sets blur on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface JoyTips {
        /**
          * Display a CTA to hide the tips
         */
        "closable": boolean;
        /**
          * If icon is defined, it will show it with the right color
         */
        "icon"?: string;
        /**
          * Defines the criticalness of the tips
         */
        "level": TipsLevel;
    }
    interface JoyTooltip {
        /**
          * Tooltip position. 2 possible values
         */
        "position": 'left' | 'right';
        /**
          * Color theme. 2 possible values
         */
        "variant": TooltipVariants;
    }
    interface JoyTooltipTrigger {
        /**
          * Use basic selector to inject the tooltip in a specific DOM location. Default is body
         */
        "appendTo": 'body' | 'host';
        /**
          * Define the event needed to display the tooltip
         */
        "event": 'mouseenter' | 'click';
        /**
          * Tooltip position. 2 possible values
         */
        "position": 'left' | 'right';
        /**
          * Allows to override tooltip size. Allows to more easily calculate its position
         */
        "tooltipWidth": number;
        /**
          * Color theme. 2 possible values
         */
        "variant": TooltipVariants;
    }
    interface JoyUserCard {
        /**
          * Can be the freelancer's full name, or whatever you want. It will be placed at the top right part.
         */
        "fullName"?: string;
        /**
          * Giving a link will make the whole component wrapped by an hyperlink
         */
        "link"?: string;
        /**
          * Given the link, it will open the link in a new tab
         */
        "newTab"?: boolean;
        /**
          * Use this prop if you don't want to use the user-card-avatar slot.
         */
        "photoUrl"?: string;
        /**
          * Freelancer's public rating.
         */
        "ratingValue"?: string;
        /**
          * Can be the freelancer's job, a company name or whatever you want. It will be placed at the top right part, below title
         */
        "subTitle"?: string;
    }
}
declare global {
    interface HTMLJoyAllCriticalElement extends Components.JoyAllCritical, HTMLStencilElement {
    }
    var HTMLJoyAllCriticalElement: {
        prototype: HTMLJoyAllCriticalElement;
        new (): HTMLJoyAllCriticalElement;
    };
    interface HTMLJoyAvailabilityElement extends Components.JoyAvailability, HTMLStencilElement {
    }
    var HTMLJoyAvailabilityElement: {
        prototype: HTMLJoyAvailabilityElement;
        new (): HTMLJoyAvailabilityElement;
    };
    interface HTMLJoyAvatarElement extends Components.JoyAvatar, HTMLStencilElement {
    }
    var HTMLJoyAvatarElement: {
        prototype: HTMLJoyAvatarElement;
        new (): HTMLJoyAvatarElement;
    };
    interface HTMLJoyAvatarsListElement extends Components.JoyAvatarsList, HTMLStencilElement {
    }
    var HTMLJoyAvatarsListElement: {
        prototype: HTMLJoyAvatarsListElement;
        new (): HTMLJoyAvatarsListElement;
    };
    interface HTMLJoyBadgeLevelElement extends Components.JoyBadgeLevel, HTMLStencilElement {
    }
    var HTMLJoyBadgeLevelElement: {
        prototype: HTMLJoyBadgeLevelElement;
        new (): HTMLJoyBadgeLevelElement;
    };
    interface HTMLJoyButtonElement extends Components.JoyButton, HTMLStencilElement {
    }
    var HTMLJoyButtonElement: {
        prototype: HTMLJoyButtonElement;
        new (): HTMLJoyButtonElement;
    };
    interface HTMLJoyCompanyAvatarElement extends Components.JoyCompanyAvatar, HTMLStencilElement {
    }
    var HTMLJoyCompanyAvatarElement: {
        prototype: HTMLJoyCompanyAvatarElement;
        new (): HTMLJoyCompanyAvatarElement;
    };
    interface HTMLJoyFormErrorElement extends Components.JoyFormError, HTMLStencilElement {
    }
    var HTMLJoyFormErrorElement: {
        prototype: HTMLJoyFormErrorElement;
        new (): HTMLJoyFormErrorElement;
    };
    interface HTMLJoyHighlightElement extends Components.JoyHighlight, HTMLStencilElement {
    }
    var HTMLJoyHighlightElement: {
        prototype: HTMLJoyHighlightElement;
        new (): HTMLJoyHighlightElement;
    };
    interface HTMLJoyIconElement extends Components.JoyIcon, HTMLStencilElement {
    }
    var HTMLJoyIconElement: {
        prototype: HTMLJoyIconElement;
        new (): HTMLJoyIconElement;
    };
    interface HTMLJoyIconButtonElement extends Components.JoyIconButton, HTMLStencilElement {
    }
    var HTMLJoyIconButtonElement: {
        prototype: HTMLJoyIconButtonElement;
        new (): HTMLJoyIconButtonElement;
    };
    interface HTMLJoyLinkElement extends Components.JoyLink, HTMLStencilElement {
    }
    var HTMLJoyLinkElement: {
        prototype: HTMLJoyLinkElement;
        new (): HTMLJoyLinkElement;
    };
    interface HTMLJoyPaginationElement extends Components.JoyPagination, HTMLStencilElement {
    }
    var HTMLJoyPaginationElement: {
        prototype: HTMLJoyPaginationElement;
        new (): HTMLJoyPaginationElement;
    };
    interface HTMLJoyPanelElement extends Components.JoyPanel, HTMLStencilElement {
    }
    var HTMLJoyPanelElement: {
        prototype: HTMLJoyPanelElement;
        new (): HTMLJoyPanelElement;
    };
    interface HTMLJoyProgressBarElement extends Components.JoyProgressBar, HTMLStencilElement {
    }
    var HTMLJoyProgressBarElement: {
        prototype: HTMLJoyProgressBarElement;
        new (): HTMLJoyProgressBarElement;
    };
    interface HTMLJoySpinnerElement extends Components.JoySpinner, HTMLStencilElement {
    }
    var HTMLJoySpinnerElement: {
        prototype: HTMLJoySpinnerElement;
        new (): HTMLJoySpinnerElement;
    };
    interface HTMLJoyTabElement extends Components.JoyTab, HTMLStencilElement {
    }
    var HTMLJoyTabElement: {
        prototype: HTMLJoyTabElement;
        new (): HTMLJoyTabElement;
    };
    interface HTMLJoyTabButtonElement extends Components.JoyTabButton, HTMLStencilElement {
    }
    var HTMLJoyTabButtonElement: {
        prototype: HTMLJoyTabButtonElement;
        new (): HTMLJoyTabButtonElement;
    };
    interface HTMLJoyTabsElement extends Components.JoyTabs, HTMLStencilElement {
    }
    var HTMLJoyTabsElement: {
        prototype: HTMLJoyTabsElement;
        new (): HTMLJoyTabsElement;
    };
    interface HTMLJoyTagElement extends Components.JoyTag, HTMLStencilElement {
    }
    var HTMLJoyTagElement: {
        prototype: HTMLJoyTagElement;
        new (): HTMLJoyTagElement;
    };
    interface HTMLJoyTagsInputElement extends Components.JoyTagsInput, HTMLStencilElement {
    }
    var HTMLJoyTagsInputElement: {
        prototype: HTMLJoyTagsInputElement;
        new (): HTMLJoyTagsInputElement;
    };
    interface HTMLJoyTagsListElement extends Components.JoyTagsList, HTMLStencilElement {
    }
    var HTMLJoyTagsListElement: {
        prototype: HTMLJoyTagsListElement;
        new (): HTMLJoyTagsListElement;
    };
    interface HTMLJoyTextElement extends Components.JoyText, HTMLStencilElement {
    }
    var HTMLJoyTextElement: {
        prototype: HTMLJoyTextElement;
        new (): HTMLJoyTextElement;
    };
    interface HTMLJoyTextareaElement extends Components.JoyTextarea, HTMLStencilElement {
    }
    var HTMLJoyTextareaElement: {
        prototype: HTMLJoyTextareaElement;
        new (): HTMLJoyTextareaElement;
    };
    interface HTMLJoyTipsElement extends Components.JoyTips, HTMLStencilElement {
    }
    var HTMLJoyTipsElement: {
        prototype: HTMLJoyTipsElement;
        new (): HTMLJoyTipsElement;
    };
    interface HTMLJoyTooltipElement extends Components.JoyTooltip, HTMLStencilElement {
    }
    var HTMLJoyTooltipElement: {
        prototype: HTMLJoyTooltipElement;
        new (): HTMLJoyTooltipElement;
    };
    interface HTMLJoyTooltipTriggerElement extends Components.JoyTooltipTrigger, HTMLStencilElement {
    }
    var HTMLJoyTooltipTriggerElement: {
        prototype: HTMLJoyTooltipTriggerElement;
        new (): HTMLJoyTooltipTriggerElement;
    };
    interface HTMLJoyUserCardElement extends Components.JoyUserCard, HTMLStencilElement {
    }
    var HTMLJoyUserCardElement: {
        prototype: HTMLJoyUserCardElement;
        new (): HTMLJoyUserCardElement;
    };
    interface HTMLElementTagNameMap {
        "joy-all-critical": HTMLJoyAllCriticalElement;
        "joy-availability": HTMLJoyAvailabilityElement;
        "joy-avatar": HTMLJoyAvatarElement;
        "joy-avatars-list": HTMLJoyAvatarsListElement;
        "joy-badge-level": HTMLJoyBadgeLevelElement;
        "joy-button": HTMLJoyButtonElement;
        "joy-company-avatar": HTMLJoyCompanyAvatarElement;
        "joy-form-error": HTMLJoyFormErrorElement;
        "joy-highlight": HTMLJoyHighlightElement;
        "joy-icon": HTMLJoyIconElement;
        "joy-icon-button": HTMLJoyIconButtonElement;
        "joy-link": HTMLJoyLinkElement;
        "joy-pagination": HTMLJoyPaginationElement;
        "joy-panel": HTMLJoyPanelElement;
        "joy-progress-bar": HTMLJoyProgressBarElement;
        "joy-spinner": HTMLJoySpinnerElement;
        "joy-tab": HTMLJoyTabElement;
        "joy-tab-button": HTMLJoyTabButtonElement;
        "joy-tabs": HTMLJoyTabsElement;
        "joy-tag": HTMLJoyTagElement;
        "joy-tags-input": HTMLJoyTagsInputElement;
        "joy-tags-list": HTMLJoyTagsListElement;
        "joy-text": HTMLJoyTextElement;
        "joy-textarea": HTMLJoyTextareaElement;
        "joy-tips": HTMLJoyTipsElement;
        "joy-tooltip": HTMLJoyTooltipElement;
        "joy-tooltip-trigger": HTMLJoyTooltipTriggerElement;
        "joy-user-card": HTMLJoyUserCardElement;
    }
}
declare namespace LocalJSX {
    interface JoyAllCritical {
    }
    interface JoyAvailability {
        /**
          * isPartial dot, define fill or stroke dot display
         */
        "isPartial"?: boolean;
        /**
          * Text Availability content, if null, only dot will be display
         */
        "label"?: string | null;
        /**
          * Status Availability, define color
         */
        "status"?: 'AVAILABLE' | 'AVAILABLE_AND_VERIFIED' | 'NOT_AVAILABLE_WITH_DATE' | 'AVAILABLE_SOON' | 'NOT_AVAILABLE' | '';
    }
    interface JoyAvatar {
        /**
          * Specify a background color. Handy for avatars list. The value is the index of css custom property array made from CSS Custom Properties value (see next table)
         */
        "color"?: AvatarColors['freelancer'];
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "compress"?: boolean;
        /**
          * Freelancer full name. Will be used to display its initials if no photoUrl is given.
         */
        "fullName"?: string;
        /**
          * Url you need to link your avatar to
         */
        "href"?: string;
        /**
          * The prop is given automatically by avatars-list component when you set compress prop to true. You won't need this prop out of an avatars-list.
         */
        "isFirstFromList"?: boolean;
        /**
          * Specify a photo url to display.
         */
        "photoUrl"?: string;
        /**
          * Avatar size, 3 possible values (can't be overridden)
         */
        "size"?: AvatarSizes;
        /**
          * Target attribute if href is used
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top' | 'framename';
        /**
          * Specify the total amount of persons remaining from a list.
         */
        "totalNumber"?: number;
        /**
          * Specify the link to redirect to the full list
         */
        "totalNumberLink"?: string;
    }
    interface JoyAvatarsList {
        /**
          * How avatars are spread. With a gap, or overlaped
         */
        "compress"?: boolean;
    }
    interface JoyBadgeLevel {
        /**
          * SuperMalter level from 1 to 3
         */
        "superMalterLevel"?: number;
        /**
          * Badge type: highpotential, maltlinker, new, supermalter or verified
         */
        "type": typeof badgeTypes[number];
        /**
          * Display text label
         */
        "visibleText"?: boolean;
    }
    interface JoyButton {
        /**
          * Disabled attribute for buttons
         */
        "disabled"?: boolean;
        /**
          * If the link as a downloadable content
         */
        "download"?: boolean;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Set the icon name if you need one
         */
        "icon"?: string;
        /**
          * Set the button in loading state
         */
        "loading"?: boolean;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Button or Link size
         */
        "size"?: ButtonSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * Type attribute for buttons
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Button or Link color theme
         */
        "variant"?: ButtonVariants;
    }
    interface JoyCompanyAvatar {
        /**
          * Company avatar color
         */
        "color"?: AvatarColors['company'];
        /**
          * Company name. Required to give image alt text.
         */
        "companyName"?: string;
        /**
          * URL source for img. Optional.
         */
        "imgSrc"?: string;
        /**
          * Size of the image. Optionnal.
         */
        "size"?: AvatarSizes;
    }
    interface JoyFormError {
        /**
          * The error text. Plain string required as any HTML injected will be escaped
         */
        "noHtmlErrorText"?: string;
        /**
          * Depending on contexts : maybe you'll need to insert it in the DOM but hide it, or injecting it into the DOM on the fly (like Vue v-if cases)
         */
        "visible"?: boolean;
    }
    interface JoyHighlight {
        /**
          * Allows to display the level status icon
         */
        "displayIcon"?: boolean;
        /**
          * Override the icon type used for level. Size can't be overridden. Won't show if displayIcon prop isn't set to true
         */
        "icon"?: string;
        /**
          * Defines the criticalness of the highlight
         */
        "level"?: HighlightLevels;
    }
    interface JoyIcon {
        /**
          * Defines a non-visible legend
         */
        "ariaLabel"?: string;
        /**
          * Two-tone icon when set to true
         */
        "bicolor"?: boolean;
        /**
          * Color change on hover
         */
        "clickable"?: boolean;
        /**
          * The icon color
         */
        "color"?: IconColors;
        /**
          * The icon custom class(es), if needed
         */
        "customClass"?: string;
        /**
          * Full colored icon when set to true
         */
        "full"?: boolean;
        /**
          * The icon svg filename
         */
        "name"?: string;
        /**
          * The icon size
         */
        "size"?: IconsSizes;
    }
    interface JoyIconButton {
        /**
          * The icon color. Default is the blue version. You can only override it with the white version.
         */
        "color"?: IconButtonColors;
        /**
          * The icon name
         */
        "icon"?: string;
        /**
          * use @joyIconButtonClick="yourMethod" for Vue apps (onJoyIconButtonClick for other stencil components) to handle snackbar close. Nothing is returned
         */
        "onJoyIconButtonClick"?: (event: CustomEvent<void>) => void;
        /**
          * The button type. As the component wraps an actual HTML button element, it will be applied to it.
         */
        "type"?: 'button';
    }
    interface JoyLink {
        /**
          * If the link as a downloadable content
         */
        "download"?: boolean;
        /**
          * Set the href of your link
         */
        "href"?: string;
        /**
          * Icon name if you want to display one, before the text
         */
        "icon"?: string;
        /**
          * Native rel attribute for hyperlinks. See https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Color theme. Default is teal, you can set white theme for darker backgrounds.
         */
        "theme"?: LinksColors;
    }
    interface JoyPagination {
        /**
          * Current page number
         */
        "currentPage"?: number;
        /**
          * data-heap attribute for next CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapNext"?: string;
        /**
          * data-heap attribute for previous CTA. We should avoid as much as possible to use this kind of props inside the webcomponents
         */
        "heapPrev"?: string;
        /**
          * Can be used as title and aria-label attributes for the next CTA
         */
        "labelNext"?: string;
        /**
          * Can be used as aria-label attribute for the full component
         */
        "labelPagination"?: string;
        /**
          * Can be used as title and aria-label attributes for the previous CTA
         */
        "labelPrev"?: string;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for next CTA
         */
        "linkNext"?: string;
        /**
          * For synchrone implementations (not SPA, basically), allows to inject the URL for previous CTA
         */
        "linkPrev"?: string;
        /**
          * use @joyChangePage="yourMethod" for Vue apps, to handle pagination change. Clicked page is returned
         */
        "onJoyChangePage"?: (event: CustomEvent<number>) => void;
        /**
          * Total number of pages in order to construct the pagination
         */
        "totalPages"?: number;
    }
    interface JoyPanel {
    }
    interface JoyProgressBar {
        /**
          * Current step number.
         */
        "currentStep"?: number | undefined;
        /**
          * Activate specific color mode. Documentation purpose.
         */
        "mode"?: 'desktop' | 'mobile';
        /**
          * Progress bar percentage, percentage usage will override steps & currentStep definition.
         */
        "percentage"?: number | undefined;
        /**
          * Total number of steps.
         */
        "steps"?: number | undefined;
    }
    interface JoySpinner {
        /**
          * Spinner colors, 2 possible values
         */
        "color"?: string;
    }
    interface JoyTab {
        /**
          * Selected status of the current tab
         */
        "selected"?: boolean;
        /**
          * A tab id or name must be provided for each `joy-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabButton {
        /**
          * "data-heap" attribute to set on the link if an {@link href} prop is passed or on the host otherwise..
         */
        "heapId"?: string;
        /**
          * If your tab is a link, give the URL
         */
        "href"?: string;
        /**
          * Event used by joy-tabs parent component. Prefer using joyTabSelected event from joy-tabs if you want to listen to any tab change
         */
        "onJoyTabButtonClick"?: (event: CustomEvent<Tab>) => void;
        /**
          * Tab selection state
         */
        "selected"?: boolean;
        /**
          * A tab id or name must be provided for each `joy-button-tab`. It's used internally to reference the selected tab
         */
        "tab": string;
    }
    interface JoyTabs {
        /**
          * If you wanna catch the tab selection in the whole component, use this event
         */
        "onJoyTabSelected"?: (event: CustomEvent<Tab>) => void;
        /**
          * Use this prop to activate a specific tab by default by giving its name
         */
        "selectedTab": string;
        /**
          * Use this prop to specify that your joy-tabs is made of links, and tabs are not updated on the fly
         */
        "sync"?: boolean;
    }
    interface JoyTag {
        /**
          * If the tag is a link, give it an href
         */
        "href"?: string;
        /**
          * Fired only if we've set the clickable prop
         */
        "onJoyTagClick"?: (event: CustomEvent<{name: string; selected: boolean}>) => void;
        /**
          * Fired only if we've click on removable tag
         */
        "onJoyTagRemove"?: (event: CustomEvent<string>) => void;
        /**
          * Display an icon CTA on the right, to remove the tag from a list. Only for primary/secondary
         */
        "removable"?: boolean;
        /**
          * Mock a radio like style. Nothing more. Only for primary/secondary
         */
        "selectable"?: boolean;
        /**
          * Tag size. Default is medium
         */
        "size"?: TagSizes;
        /**
          * Native target attribute for hyperlinks.
         */
        "target"?: HyperLinksTargets;
        /**
          * Tag color theme
         */
        "variant"?: TagVariants;
    }
    interface JoyTagsInput {
        /**
          * Invalid state
         */
        "invalid"?: boolean;
        /**
          * form name for our tags input
         */
        "name"?: string;
        /**
          * When the tags list is on error. According to the returned ErrorType, you can display the right error.
         */
        "onJoyTagsError"?: (event: CustomEvent<ErrorType>) => void;
        /**
          * On input blur
         */
        "onJoyTagsInputBlur"?: (event: CustomEvent<void>) => void;
        /**
          * On input focus
         */
        "onJoyTagsInputFocus"?: (event: CustomEvent<void>) => void;
        /**
          * When the tags list is updated
         */
        "onJoyTagsUpdate"?: (event: CustomEvent<string[]>) => void;
        /**
          * Placeholder used for the input
         */
        "placeholder"?: string;
        /**
          * Size for your tags. Check Tag documentation for available values
         */
        "size"?: TagSizes;
        /**
          * Validation type : if 'email' is given, it will create a specific check before actually adding the tag. Default to none.
         */
        "validation"?: 'email' | 'none';
        /**
          * Saved values for the tags list. Must be an array like string eg. ['first', 'second'].
         */
        "values"?: string;
        /**
          * Variant/color type for your tags. Check Tag documentation for available values
         */
        "variant"?: TagVariants;
    }
    interface JoyTagsList {
    }
    interface JoyText {
    }
    interface JoyTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow"?: boolean;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
         */
        "autocapitalize"?: string;
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterkeyhint"?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
        /**
          * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
         */
        "fireFocusEvents"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * If `true`, the textarea will be considered as invalid.
         */
        "invalid"?: boolean;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Use this prop to give component the translation used to display minimum chars count.
         */
        "minlengthLabel"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onJoyTextareaBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input value has changed.
         */
        "onJoyTextareaChange"?: (event: CustomEvent<{value: string}>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onJoyTextareaFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onJoyTextareaInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number | undefined;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
        /**
          * Indicates how the control wraps text.
         */
        "wrap"?: 'hard' | 'soft' | 'off';
    }
    interface JoyTips {
        /**
          * Display a CTA to hide the tips
         */
        "closable"?: boolean;
        /**
          * If icon is defined, it will show it with the right color
         */
        "icon"?: string;
        /**
          * Defines the criticalness of the tips
         */
        "level"?: TipsLevel;
    }
    interface JoyTooltip {
        /**
          * Tooltip position. 2 possible values
         */
        "position"?: 'left' | 'right';
        /**
          * Color theme. 2 possible values
         */
        "variant"?: TooltipVariants;
    }
    interface JoyTooltipTrigger {
        /**
          * Use basic selector to inject the tooltip in a specific DOM location. Default is body
         */
        "appendTo"?: 'body' | 'host';
        /**
          * Define the event needed to display the tooltip
         */
        "event"?: 'mouseenter' | 'click';
        /**
          * Tooltip position. 2 possible values
         */
        "position"?: 'left' | 'right';
        /**
          * Allows to override tooltip size. Allows to more easily calculate its position
         */
        "tooltipWidth"?: number;
        /**
          * Color theme. 2 possible values
         */
        "variant"?: TooltipVariants;
    }
    interface JoyUserCard {
        /**
          * Can be the freelancer's full name, or whatever you want. It will be placed at the top right part.
         */
        "fullName"?: string;
        /**
          * Giving a link will make the whole component wrapped by an hyperlink
         */
        "link"?: string;
        /**
          * Given the link, it will open the link in a new tab
         */
        "newTab"?: boolean;
        /**
          * Use this prop if you don't want to use the user-card-avatar slot.
         */
        "photoUrl"?: string;
        /**
          * Freelancer's public rating.
         */
        "ratingValue"?: string;
        /**
          * Can be the freelancer's job, a company name or whatever you want. It will be placed at the top right part, below title
         */
        "subTitle"?: string;
    }
    interface IntrinsicElements {
        "joy-all-critical": JoyAllCritical;
        "joy-availability": JoyAvailability;
        "joy-avatar": JoyAvatar;
        "joy-avatars-list": JoyAvatarsList;
        "joy-badge-level": JoyBadgeLevel;
        "joy-button": JoyButton;
        "joy-company-avatar": JoyCompanyAvatar;
        "joy-form-error": JoyFormError;
        "joy-highlight": JoyHighlight;
        "joy-icon": JoyIcon;
        "joy-icon-button": JoyIconButton;
        "joy-link": JoyLink;
        "joy-pagination": JoyPagination;
        "joy-panel": JoyPanel;
        "joy-progress-bar": JoyProgressBar;
        "joy-spinner": JoySpinner;
        "joy-tab": JoyTab;
        "joy-tab-button": JoyTabButton;
        "joy-tabs": JoyTabs;
        "joy-tag": JoyTag;
        "joy-tags-input": JoyTagsInput;
        "joy-tags-list": JoyTagsList;
        "joy-text": JoyText;
        "joy-textarea": JoyTextarea;
        "joy-tips": JoyTips;
        "joy-tooltip": JoyTooltip;
        "joy-tooltip-trigger": JoyTooltipTrigger;
        "joy-user-card": JoyUserCard;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "joy-all-critical": LocalJSX.JoyAllCritical & JSXBase.HTMLAttributes<HTMLJoyAllCriticalElement>;
            "joy-availability": LocalJSX.JoyAvailability & JSXBase.HTMLAttributes<HTMLJoyAvailabilityElement>;
            "joy-avatar": LocalJSX.JoyAvatar & JSXBase.HTMLAttributes<HTMLJoyAvatarElement>;
            "joy-avatars-list": LocalJSX.JoyAvatarsList & JSXBase.HTMLAttributes<HTMLJoyAvatarsListElement>;
            "joy-badge-level": LocalJSX.JoyBadgeLevel & JSXBase.HTMLAttributes<HTMLJoyBadgeLevelElement>;
            "joy-button": LocalJSX.JoyButton & JSXBase.HTMLAttributes<HTMLJoyButtonElement>;
            "joy-company-avatar": LocalJSX.JoyCompanyAvatar & JSXBase.HTMLAttributes<HTMLJoyCompanyAvatarElement>;
            "joy-form-error": LocalJSX.JoyFormError & JSXBase.HTMLAttributes<HTMLJoyFormErrorElement>;
            "joy-highlight": LocalJSX.JoyHighlight & JSXBase.HTMLAttributes<HTMLJoyHighlightElement>;
            "joy-icon": LocalJSX.JoyIcon & JSXBase.HTMLAttributes<HTMLJoyIconElement>;
            "joy-icon-button": LocalJSX.JoyIconButton & JSXBase.HTMLAttributes<HTMLJoyIconButtonElement>;
            "joy-link": LocalJSX.JoyLink & JSXBase.HTMLAttributes<HTMLJoyLinkElement>;
            "joy-pagination": LocalJSX.JoyPagination & JSXBase.HTMLAttributes<HTMLJoyPaginationElement>;
            "joy-panel": LocalJSX.JoyPanel & JSXBase.HTMLAttributes<HTMLJoyPanelElement>;
            "joy-progress-bar": LocalJSX.JoyProgressBar & JSXBase.HTMLAttributes<HTMLJoyProgressBarElement>;
            "joy-spinner": LocalJSX.JoySpinner & JSXBase.HTMLAttributes<HTMLJoySpinnerElement>;
            "joy-tab": LocalJSX.JoyTab & JSXBase.HTMLAttributes<HTMLJoyTabElement>;
            "joy-tab-button": LocalJSX.JoyTabButton & JSXBase.HTMLAttributes<HTMLJoyTabButtonElement>;
            "joy-tabs": LocalJSX.JoyTabs & JSXBase.HTMLAttributes<HTMLJoyTabsElement>;
            "joy-tag": LocalJSX.JoyTag & JSXBase.HTMLAttributes<HTMLJoyTagElement>;
            "joy-tags-input": LocalJSX.JoyTagsInput & JSXBase.HTMLAttributes<HTMLJoyTagsInputElement>;
            "joy-tags-list": LocalJSX.JoyTagsList & JSXBase.HTMLAttributes<HTMLJoyTagsListElement>;
            "joy-text": LocalJSX.JoyText & JSXBase.HTMLAttributes<HTMLJoyTextElement>;
            "joy-textarea": LocalJSX.JoyTextarea & JSXBase.HTMLAttributes<HTMLJoyTextareaElement>;
            "joy-tips": LocalJSX.JoyTips & JSXBase.HTMLAttributes<HTMLJoyTipsElement>;
            "joy-tooltip": LocalJSX.JoyTooltip & JSXBase.HTMLAttributes<HTMLJoyTooltipElement>;
            "joy-tooltip-trigger": LocalJSX.JoyTooltipTrigger & JSXBase.HTMLAttributes<HTMLJoyTooltipTriggerElement>;
            "joy-user-card": LocalJSX.JoyUserCard & JSXBase.HTMLAttributes<HTMLJoyUserCardElement>;
        }
    }
}
